{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction In a nutshell, IRIS is a collaborative platform for incident response analysts allowing to share investigations at a technical level. It's web application, so it can be either installed on a fixed-server, or on a laptop for roaming investigations where internet might not be available. It is born following the struggle to share long and complex investigations among analysts. Most of the current similar platforms are either commercial or targeting the incident handling and triage steps, not the investigation itself. The project is available at https://github.com/dfir-iris/iris-web I've read enough, I want to try it Iris comes in dockers - you only need Docker Compose and you'll be set in a few minutes. Follow the guide . Disclaimer Iris is in its early stage. It can already be used in production, but please set backups of the database and DO NOT expose the interface on the Internet. We highly recommended the use of a private dedicated and secured network. Some questions you might have What can I do with Iris ? You can : Run investigations with as many analysts as you want. Everyone has its own account Run as many investigations as you want in parallel For each investigation: Associate a customer Create a high level summary Create notes under the form of a Kanban board Create IOCs Create assets (computers, servers, accounts, firewalls, or anything you want) Associate IOCs with assets Obtain insights on assets and IOCs previously encountered in investigations Create a proper timeline referencing assets and IOCs Create an automated graph of the attack from the timeline Register evidences Upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualizer) Enrich any mentioned case objects with external sources Set and attribute tasks to people to keep track of everything Register every step of the investigation Generate a report based on templates, automatically filled with the elements registered in the investigation Generate a report of activity with every step registered as well as the auto-registered entries for each analyst Search notes and IOCs across all investigations Extend the mentioned case objects to fit your needs Integrates IRIS with your current infrastructure thanks to the API and the modules, which allows to extend the platform features. What can I not do with Iris ? This is the part where we need you. Iris aims to be a collaborative project, so any idea is welcome. You can head to the Github of the project and create an issue with the idea. What Iris is made of ? Iris is mostly coded in Python 3. There is also some HTML, CSS and javascript for the interface. Under the hood, Iris relies on : Flask for the web engine SQLAlchemy and PostgresSQL for the database RabbitMQ for the jobs processing Nginx for the reverse proxy Can I be involved ? Absolutely. You can either contact us directly or submit pull requests and ideas on the GitHub. Who's behind Iris ? The idea was born in the French CSIRT of Airbus Cybersecurity, and created by a small group of friendly incident response analysts. Iris has been used since its early stage in 2020, on more than a hundred investigations including complex cyberattacks. Why was Iris published ? We felt a gap and we wanted to fill it. We believe open source tools driven by communities can only make them better.","title":"Introduction"},{"location":"#introduction","text":"In a nutshell, IRIS is a collaborative platform for incident response analysts allowing to share investigations at a technical level. It's web application, so it can be either installed on a fixed-server, or on a laptop for roaming investigations where internet might not be available. It is born following the struggle to share long and complex investigations among analysts. Most of the current similar platforms are either commercial or targeting the incident handling and triage steps, not the investigation itself. The project is available at https://github.com/dfir-iris/iris-web I've read enough, I want to try it Iris comes in dockers - you only need Docker Compose and you'll be set in a few minutes. Follow the guide . Disclaimer Iris is in its early stage. It can already be used in production, but please set backups of the database and DO NOT expose the interface on the Internet. We highly recommended the use of a private dedicated and secured network.","title":"Introduction"},{"location":"#some-questions-you-might-have","text":"","title":"Some questions you might have"},{"location":"#what-can-i-do-with-iris","text":"You can : Run investigations with as many analysts as you want. Everyone has its own account Run as many investigations as you want in parallel For each investigation: Associate a customer Create a high level summary Create notes under the form of a Kanban board Create IOCs Create assets (computers, servers, accounts, firewalls, or anything you want) Associate IOCs with assets Obtain insights on assets and IOCs previously encountered in investigations Create a proper timeline referencing assets and IOCs Create an automated graph of the attack from the timeline Register evidences Upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualizer) Enrich any mentioned case objects with external sources Set and attribute tasks to people to keep track of everything Register every step of the investigation Generate a report based on templates, automatically filled with the elements registered in the investigation Generate a report of activity with every step registered as well as the auto-registered entries for each analyst Search notes and IOCs across all investigations Extend the mentioned case objects to fit your needs Integrates IRIS with your current infrastructure thanks to the API and the modules, which allows to extend the platform features.","title":"What can I do with Iris ?"},{"location":"#what-can-i-not-do-with-iris","text":"This is the part where we need you. Iris aims to be a collaborative project, so any idea is welcome. You can head to the Github of the project and create an issue with the idea.","title":"What can I not do with Iris ?"},{"location":"#what-iris-is-made-of","text":"Iris is mostly coded in Python 3. There is also some HTML, CSS and javascript for the interface. Under the hood, Iris relies on : Flask for the web engine SQLAlchemy and PostgresSQL for the database RabbitMQ for the jobs processing Nginx for the reverse proxy","title":"What Iris is made of ?"},{"location":"#can-i-be-involved","text":"Absolutely. You can either contact us directly or submit pull requests and ideas on the GitHub.","title":"Can I be involved ?"},{"location":"#whos-behind-iris","text":"The idea was born in the French CSIRT of Airbus Cybersecurity, and created by a small group of friendly incident response analysts. Iris has been used since its early stage in 2020, on more than a hundred investigations including complex cyberattacks.","title":"Who's behind Iris ?"},{"location":"#why-was-iris-published","text":"We felt a gap and we wanted to fill it. We believe open source tools driven by communities can only make them better.","title":"Why was Iris published ?"},{"location":"getting_started/","text":"Quick Start The most straight forward and recommended way to use IRIS is with Docker. This is presented here. Pre-requisites Hardware Iris is not very resourceful and can be run on a small laptop (4 cores, 8Gb of RAM). However, for large organization and heavy usage, it will need to be greatly scaled up. We don't have benchmarks yet but keep in mind that the database can grow rapidly and modules can be resourceful depending on their purposes. The source code includes a burst test that you can adjust to recreate the load Iris might face. Docker Docker and docker compose are needed to build and run the project. Depending on the OS you will find all the information to install them on the official website of Docker . The platform is tested on Linux and MacOS (including Apple Silicon). While it should work on Windows, some path needed by the dockers to store permanent files might need to be changed in the dockerfiles. Build and run You have found a home for Iris and installed Docker and Docker compose, it is time to build the containers. Iris is split on 5 Docker services, each with a different role. app - iris_webapp : The core, including web server, DB management, module management etc. db : A PostgresSQL database RabbitMQ : A RabbitMQ engine to handle jobs queuing and processing worker : Jobs handler relying on RabbitMQ nginx : A NGINX reverse proxy Each service can be built independently, which is useful when developing. In this QuickStart everything is built at once. # Clone the iris-web repository git clone https://github.com/dfir-iris/iris-web.git cd iris-web # Copy the environment file cp .env.model .env # [... optionally, do some configuration as specified below ...] # Build the dockers docker-compose build # Run IRIS docker-compose up Iris will be available on the host interface, port 4433, HTTPS protocol. By default, an administrator account is created. The password is printed in stdout the very first time Iris is started. It won't be printed anymore after that. You can search for WARNING :: post_init :: create_safe_admin :: >>> in the logs to find the password. If you want to define an admin password at the first start, you can also create and define the environment variable IRIS_ADM_PASSWORD in the app docker instance (see the webApp Dockerfile). This has no effects once the administrator account is created. Optional configuration You can skip this part if you just want to try or develop. If used in production, please configure the .env file at the root of the project: Nginx: you might want to specify your own certificate as specified above Database credentials: POSTGRES_PASSWORD and DB_PASS (you can also customise the usernames) IRIS secrets: SECRET_KEY and SECURITY_PASSWORD_SALT The very first time the app builds might take quite a while. After that if a service needs an update, the building process is faster.","title":"Quick Start"},{"location":"getting_started/#quick-start","text":"The most straight forward and recommended way to use IRIS is with Docker. This is presented here.","title":"Quick Start"},{"location":"getting_started/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"getting_started/#hardware","text":"Iris is not very resourceful and can be run on a small laptop (4 cores, 8Gb of RAM). However, for large organization and heavy usage, it will need to be greatly scaled up. We don't have benchmarks yet but keep in mind that the database can grow rapidly and modules can be resourceful depending on their purposes. The source code includes a burst test that you can adjust to recreate the load Iris might face.","title":"Hardware"},{"location":"getting_started/#docker","text":"Docker and docker compose are needed to build and run the project. Depending on the OS you will find all the information to install them on the official website of Docker . The platform is tested on Linux and MacOS (including Apple Silicon). While it should work on Windows, some path needed by the dockers to store permanent files might need to be changed in the dockerfiles.","title":"Docker"},{"location":"getting_started/#build-and-run","text":"You have found a home for Iris and installed Docker and Docker compose, it is time to build the containers. Iris is split on 5 Docker services, each with a different role. app - iris_webapp : The core, including web server, DB management, module management etc. db : A PostgresSQL database RabbitMQ : A RabbitMQ engine to handle jobs queuing and processing worker : Jobs handler relying on RabbitMQ nginx : A NGINX reverse proxy Each service can be built independently, which is useful when developing. In this QuickStart everything is built at once. # Clone the iris-web repository git clone https://github.com/dfir-iris/iris-web.git cd iris-web # Copy the environment file cp .env.model .env # [... optionally, do some configuration as specified below ...] # Build the dockers docker-compose build # Run IRIS docker-compose up Iris will be available on the host interface, port 4433, HTTPS protocol. By default, an administrator account is created. The password is printed in stdout the very first time Iris is started. It won't be printed anymore after that. You can search for WARNING :: post_init :: create_safe_admin :: >>> in the logs to find the password. If you want to define an admin password at the first start, you can also create and define the environment variable IRIS_ADM_PASSWORD in the app docker instance (see the webApp Dockerfile). This has no effects once the administrator account is created.","title":"Build and run"},{"location":"getting_started/#optional-configuration","text":"You can skip this part if you just want to try or develop. If used in production, please configure the .env file at the root of the project: Nginx: you might want to specify your own certificate as specified above Database credentials: POSTGRES_PASSWORD and DB_PASS (you can also customise the usernames) IRIS secrets: SECRET_KEY and SECURITY_PASSWORD_SALT The very first time the app builds might take quite a while. After that if a service needs an update, the building process is faster.","title":"Optional configuration"},{"location":"roadmap/","text":"Roadmap Photo by Annie Spratt The roadmap is constantly evolving with feedbacks we receive. We've thus moved it within a Github project. You can check it here .","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Photo by Annie Spratt The roadmap is constantly evolving with feedbacks we receive. We've thus moved it within a Github project. You can check it here .","title":"Roadmap"},{"location":"zqa/","text":"Q & A Cases Can I recover a deleted case ? No. Cases are deleted from the database and changes are committed. There is no coming back unless you have made backups of the database (which we recommend). Can I recover a deleted case object ? No. Every object such as IOCs, assets, events, notes, etc are immediately deleted from the database and changes are committed. Can I add a new asset type ? Yes. With a user that have administrative rights, go to Advanced > Assets Types . Can I add a new IOC type ? Yes. Starting from v1.3.0, IOC types can be manipulated. Can I add new fields to case objects such as IOCs, Assets, etc ? Yes. Starting from v1.4.0, all case objects can be extended thanks to custom attributes. With a user that have administrative rights, go to Advanced > Objects Attributes . Can I search into custom attributes fields Not for now. The searches in each case objects page are done client-side, and the attributes are not fetched. We will however implement a server side search in next releases. Can I create two cases with the same name for the same customer ? Yes. Cases are identified with a unique number, so they can have the same name. Can I restrict the view of case to a set of users ? No. Please see Security. Can I change the name or customer of an existing case ? These changes are not possible for now but it might be implemented in future versions. Operations What is the password policy ? Can it be changed ? For now the password policy is hardcoded and cannot be changed. It should be 12 characters minimum and contains a capital letter and a number. Can I change my profile picture ? No, not for now. This wasn't a priority for us, it will be released in future versions. I lost the administrator password, can I recover it ? Passwords are hashed so they can't be recovered. But you can change it. If you have another admin user : Being logged as this user, simply head to the Advanced > Users section, and change the administrator password. If you don't have another admin user: You can't do the change via Iris, you need to update the DB manually. Danger ! Do not delete and recreate any users from the DB ! This will create inconsistencies in the relations and likely corrupt everything. Generate the hash of the new password with Python BCrypt import bcrypt print ( bcrypt . hashpw ( < new_password > , bcrypt . gensalt ()) Connect to the DB docker then the Postgresql database iris_db and update the password / # su postgres / # psql postgres = # \\c iris_db postgres = # UPDATE user SET password = '<hash>' WHERE \"user\".name == 'administrator'; Can I delete a user ? No. To keep consistencies in the database, users unfortunately cannot be deleted if they have done some activities. You can however disable them to prevent them appearing in the UI. Can I delete a customer ? No. To keep consistencies in the database, customers unfortunately cannot be deleted if they are linked to cases. Can I create organizations or groups ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I create more roles ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I prevent backrefs of assets and IOCs ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. My report template is not generated and generates an error Please triple check typos in tags as there is no fault tolerance. Integration Can I enrich IOCs with external sources ? Starting from v1.4.0, it is now possible to easily develop module to enrich case objects. A module Iris VT is already provided to offer VirusTotal insights. Is there an API client ? Yes, you can find it on our Github . Security Can I restrict cases ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I expose IRIS on the Internet ? NO ! Please don't. This platform should only be accessible in a restricted environment. I found a security issue, can I have a bounty ? No - IRIS is free and open source so there is no bounty. Please report it as soon as possible so we can fix it. MISC What does IRIS stand for ? Originally Incident Response Investigation System. But it can be whatever you want really.","title":"Q & A"},{"location":"zqa/#q-a","text":"","title":"Q &amp; A"},{"location":"zqa/#cases","text":"Can I recover a deleted case ? No. Cases are deleted from the database and changes are committed. There is no coming back unless you have made backups of the database (which we recommend). Can I recover a deleted case object ? No. Every object such as IOCs, assets, events, notes, etc are immediately deleted from the database and changes are committed. Can I add a new asset type ? Yes. With a user that have administrative rights, go to Advanced > Assets Types . Can I add a new IOC type ? Yes. Starting from v1.3.0, IOC types can be manipulated. Can I add new fields to case objects such as IOCs, Assets, etc ? Yes. Starting from v1.4.0, all case objects can be extended thanks to custom attributes. With a user that have administrative rights, go to Advanced > Objects Attributes . Can I search into custom attributes fields Not for now. The searches in each case objects page are done client-side, and the attributes are not fetched. We will however implement a server side search in next releases. Can I create two cases with the same name for the same customer ? Yes. Cases are identified with a unique number, so they can have the same name. Can I restrict the view of case to a set of users ? No. Please see Security. Can I change the name or customer of an existing case ? These changes are not possible for now but it might be implemented in future versions.","title":"Cases"},{"location":"zqa/#operations","text":"What is the password policy ? Can it be changed ? For now the password policy is hardcoded and cannot be changed. It should be 12 characters minimum and contains a capital letter and a number. Can I change my profile picture ? No, not for now. This wasn't a priority for us, it will be released in future versions. I lost the administrator password, can I recover it ? Passwords are hashed so they can't be recovered. But you can change it. If you have another admin user : Being logged as this user, simply head to the Advanced > Users section, and change the administrator password. If you don't have another admin user: You can't do the change via Iris, you need to update the DB manually. Danger ! Do not delete and recreate any users from the DB ! This will create inconsistencies in the relations and likely corrupt everything. Generate the hash of the new password with Python BCrypt import bcrypt print ( bcrypt . hashpw ( < new_password > , bcrypt . gensalt ()) Connect to the DB docker then the Postgresql database iris_db and update the password / # su postgres / # psql postgres = # \\c iris_db postgres = # UPDATE user SET password = '<hash>' WHERE \"user\".name == 'administrator'; Can I delete a user ? No. To keep consistencies in the database, users unfortunately cannot be deleted if they have done some activities. You can however disable them to prevent them appearing in the UI. Can I delete a customer ? No. To keep consistencies in the database, customers unfortunately cannot be deleted if they are linked to cases. Can I create organizations or groups ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I create more roles ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I prevent backrefs of assets and IOCs ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. My report template is not generated and generates an error Please triple check typos in tags as there is no fault tolerance.","title":"Operations"},{"location":"zqa/#integration","text":"Can I enrich IOCs with external sources ? Starting from v1.4.0, it is now possible to easily develop module to enrich case objects. A module Iris VT is already provided to offer VirusTotal insights. Is there an API client ? Yes, you can find it on our Github .","title":"Integration"},{"location":"zqa/#security","text":"Can I restrict cases ? No. It might be possible in future versions but for now it is better to spin up a new instance for restricted cases. Can I expose IRIS on the Internet ? NO ! Please don't. This platform should only be accessible in a restricted environment. I found a security issue, can I have a bounty ? No - IRIS is free and open source so there is no bounty. Please report it as soon as possible so we can fix it.","title":"Security"},{"location":"zqa/#misc","text":"What does IRIS stand for ? Originally Incident Response Investigation System. But it can be whatever you want really.","title":"MISC"},{"location":"development/environment/","text":"Environment This documentation is not a How-To develop IRIS. It only proposes a setup to easily develop and test IRIS. It follows an issue raised on the Github of the project. It recommends the use of a hybrid development environment, as most of the time only the web-app needs to be changed: Pycharm or any Python IDE for the web-app Docker for db, nginx, celery and worker. The three later are even optional if you don't develop modules. Web-app For the webapp configuration, a specific .ini need to be created. Create config.priv.ini in source/app by copying the config.docker.ini present in the same directory. Change PG_SERVER = db to PG_SERVER = 127.0.0.1 or whatever IP is the Postgresql/docker running with That's the only configuration change needed for the app to run outside docker. The docker.priv.ini is already excluded in gitignore. Then Pycharm need to be setup with a dedicated environment, by adding a new configuration: Script path : source/run.py Python interpreter 3.9 Working directory: source To have pylint, right click on source in the directory tree and mark directory as > sources root . The requirements then need to be installed. Pycharm should detect the requirements.txt and propose to install the dependencies. Otherwise they can be installed with the following command (issued in the virtual environment) : pip3 install -r source\\requirements.txt Run Spin up the docker db docker-compose up db Run the Pycharm configuration you created The interface should be accessible on http://127.0.0.1:8000 (and https://127.0.0.1:4433 if you started the nginx docker) IRIS can now be developed and debugged on the fly. Tests in docker Once the code is working by running on Pycharm, we highly recommend testing it on Docker. To do so, the app docker need to be erased and rebuilt. docker-compose rm app docker-compose build app docker-compose up db app Development considerations If the development results in DB modification, please use Alembic and add a migration script so users don't loose their data when they upgrade.","title":"Environment"},{"location":"development/environment/#environment","text":"This documentation is not a How-To develop IRIS. It only proposes a setup to easily develop and test IRIS. It follows an issue raised on the Github of the project. It recommends the use of a hybrid development environment, as most of the time only the web-app needs to be changed: Pycharm or any Python IDE for the web-app Docker for db, nginx, celery and worker. The three later are even optional if you don't develop modules.","title":"Environment"},{"location":"development/environment/#web-app","text":"For the webapp configuration, a specific .ini need to be created. Create config.priv.ini in source/app by copying the config.docker.ini present in the same directory. Change PG_SERVER = db to PG_SERVER = 127.0.0.1 or whatever IP is the Postgresql/docker running with That's the only configuration change needed for the app to run outside docker. The docker.priv.ini is already excluded in gitignore. Then Pycharm need to be setup with a dedicated environment, by adding a new configuration: Script path : source/run.py Python interpreter 3.9 Working directory: source To have pylint, right click on source in the directory tree and mark directory as > sources root . The requirements then need to be installed. Pycharm should detect the requirements.txt and propose to install the dependencies. Otherwise they can be installed with the following command (issued in the virtual environment) : pip3 install -r source\\requirements.txt","title":"Web-app"},{"location":"development/environment/#run","text":"Spin up the docker db docker-compose up db Run the Pycharm configuration you created The interface should be accessible on http://127.0.0.1:8000 (and https://127.0.0.1:4433 if you started the nginx docker) IRIS can now be developed and debugged on the fly.","title":"Run"},{"location":"development/environment/#tests-in-docker","text":"Once the code is working by running on Pycharm, we highly recommend testing it on Docker. To do so, the app docker need to be erased and rebuilt. docker-compose rm app docker-compose build app docker-compose up db app Development considerations If the development results in DB modification, please use Alembic and add a migration script so users don't loose their data when they upgrade.","title":"Tests in docker"},{"location":"development/hooks/","text":"IRIS Hooks Introduced in IRIS v1.4.0 Hooks are a mean for modules to react on specific events that occurs on IRIS. By subscribing to a hook, a module is automatically notified when the associated event occurs. This offers a multitude of possibilities, from adding insight to IRIS objects, to pushing information to another platform or even changing how IRIS works. Types There are 3 types of hooks. On preload : Triggered before an object is processed and committed to database. It is triggered right after a request is received, and the data associated with the hook is usually the request content itself. In most of the cases, modules should not subscribe to these hooks. On postload : Triggered after an object is processed and committed to database. It is triggered after IRIS processed the request and the data associated with the hook is a usually a list of SqlAlchemy objects (such as IOC, Assets, etc). Manual : Triggered by manual action of a user. When a module subscribes to these hooks, it needs to provide a \"menu option name\" which will be display to users. When they click this option, the associated hook is triggered for this module only. Multiple manual hooks can be registered for one module. Danger on_preload hooks must run synchronously, i.e not queued in RabbitMQ. This effectively blocks the current user request until the module finishes the processing. We highly recommend to only use on_postload hooks for a better user experience. These hooks are transparent for users and rely on already verified and committed data. Handling on_preload hooks implies the data received is unsafe - directly coming from remote clients - and the module need to process the data as fast as possible. Subscribing and unsubscribing Two methods are provided by IrisModuleInterface to subscribe and unsubscribe to hooks. def register_to_hook ( module_id : int , iris_hook_name : str , manual_hook_name : str = None , run_asynchronously : bool = True ) def deregister_from_hook ( module_id : int , iris_hook_name : str ) The registration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which subscribe. This must be one of the hook listed in the section below. manual_hook_name : The name of the UI menu that is provided to users if the registration concerns a manual hook. If nothing is provided, IRIS will create a name composed as follows : <module_name>::<hook_name> . This value is ignored if the signal is not manual. run_asynchronously : Set to True (default) to run the module in a RabbitMQ task upon hook triggering. If set to False, the module is called immediately, which have for effect to effectively block the current user request until the module finishes. This is the behavior to use for on_preload hooks. However , we strongly recommend the use of on_postload hooks to prevent any unwanted (see warning section above). The deregistration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which unsubscribe. If the module is not subscribe to the specified hook the function returns without errors. Please see the modules documentation for more details on how to implement these methods. Available hooks The following hooks are natively available for subscription. Hook name Description on_preload_case_create Triggered on case creation, before commit in DB on_postload_case_create Triggered on case creation, after commit in DB on_preload_case_delete Triggered on case deletion, before commit in DB on_postload_case_delete Triggered on case deletion, after commit in DB on_preload_asset_create Triggered on asset creation, before commit in DB on_postload_asset_create Triggered on asset creation, after commit in DB on_preload_asset_update Triggered on asset update, before commit in DB on_postload_asset_update Triggered on asset update, after commit in DB on_preload_asset_delete Triggered on asset deletion, before commit in DB on_postload_asset_delete Triggered on asset deletion, after commit in DB on_manual_trigger_asset Triggered upon user action on_preload_note_create Triggered on note creation, before commit in DB on_postload_note_create Triggered on note creation, after commit in DB on_preload_note_update Triggered on note update, before commit in DB on_postload_note_update Triggered on note update, after commit in DB on_preload_note_delete Triggered on note deletion, before commit in DB on_postload_note_delete Triggered on note deletion, after commit in DB on_manual_trigger_note Triggered upon user action on_preload_ioc_create Triggered on ioc creation, before commit in DB on_postload_ioc_create Triggered on ioc creation, after commit in DB on_preload_ioc_update Triggered on ioc update, before commit in DB on_postload_ioc_update Triggered on ioc update, after commit in DB on_preload_ioc_delete Triggered on ioc deletion, before commit in DB on_postload_ioc_delete Triggered on ioc deletion, after commit in DB on_manual_trigger_ioc Triggered upon user action on_preload_event_create Triggered on event creation, before commit in DB on_postload_event_create Triggered on event creation, after commit in DB on_preload_event_update Triggered on event update, before commit in DB on_postload_event_update Triggered on event update, after commit in DB on_preload_event_delete Triggered on event deletion, before commit in DB on_postload_event_delete Triggered on event deletion, after commit in DB on_manual_trigger_event Triggered upon user action on_preload_evidence_create Triggered on evidence creation, before commit in DB on_postload_evidence_create Triggered on evidence creation, after commit in DB on_preload_evidence_update Triggered on evidence update, before commit in DB on_postload_evidence_update Triggered on evidence update, after commit in DB on_preload_evidence_delete Triggered on evidence deletion, before commit in DB on_postload_evidence_delete Triggered on evidence deletion, after commit in DB on_manual_trigger_evidence Triggered upon user action on_preload_task_create Triggered on task creation, before commit in DB on_postload_task_create Triggered on task creation, after commit in DB on_preload_task_update Triggered on task update, before commit in DB on_postload_task_update Triggered on task update, after commit in DB on_preload_task_delete Triggered on task deletion, before commit in DB on_postload_task_delete Triggered on task deletion, after commit in DB on_manual_trigger_task Triggered upon user action on_preload_global_task_create Triggered on global task creation, before commit in DB on_postload_global_task_create Triggered on global task creation, after commit in DB on_preload_global_task_update Triggered on task update, before commit in DB on_postload_global_task_update Triggered on global task update, after commit in DB on_preload_global_task_delete Triggered on task deletion, before commit in DB on_postload_global_task_delete Triggered on global task deletion, after commit in DB on_manual_trigger_global_task Triggered upon user action on_preload_report_create Triggered on report creation, before generation in DB on_postload_report_create Triggered on report creation, before download of the document on_preload_activities_report_create Triggered on activities report creation, before generation in DB on_postload_activities_report_create Triggered on activities report creation, before download of the document","title":"IRIS Hooks"},{"location":"development/hooks/#iris-hooks","text":"Introduced in IRIS v1.4.0 Hooks are a mean for modules to react on specific events that occurs on IRIS. By subscribing to a hook, a module is automatically notified when the associated event occurs. This offers a multitude of possibilities, from adding insight to IRIS objects, to pushing information to another platform or even changing how IRIS works.","title":"IRIS Hooks"},{"location":"development/hooks/#types","text":"There are 3 types of hooks. On preload : Triggered before an object is processed and committed to database. It is triggered right after a request is received, and the data associated with the hook is usually the request content itself. In most of the cases, modules should not subscribe to these hooks. On postload : Triggered after an object is processed and committed to database. It is triggered after IRIS processed the request and the data associated with the hook is a usually a list of SqlAlchemy objects (such as IOC, Assets, etc). Manual : Triggered by manual action of a user. When a module subscribes to these hooks, it needs to provide a \"menu option name\" which will be display to users. When they click this option, the associated hook is triggered for this module only. Multiple manual hooks can be registered for one module. Danger on_preload hooks must run synchronously, i.e not queued in RabbitMQ. This effectively blocks the current user request until the module finishes the processing. We highly recommend to only use on_postload hooks for a better user experience. These hooks are transparent for users and rely on already verified and committed data. Handling on_preload hooks implies the data received is unsafe - directly coming from remote clients - and the module need to process the data as fast as possible.","title":"Types"},{"location":"development/hooks/#subscribing-and-unsubscribing","text":"Two methods are provided by IrisModuleInterface to subscribe and unsubscribe to hooks. def register_to_hook ( module_id : int , iris_hook_name : str , manual_hook_name : str = None , run_asynchronously : bool = True ) def deregister_from_hook ( module_id : int , iris_hook_name : str ) The registration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which subscribe. This must be one of the hook listed in the section below. manual_hook_name : The name of the UI menu that is provided to users if the registration concerns a manual hook. If nothing is provided, IRIS will create a name composed as follows : <module_name>::<hook_name> . This value is ignored if the signal is not manual. run_asynchronously : Set to True (default) to run the module in a RabbitMQ task upon hook triggering. If set to False, the module is called immediately, which have for effect to effectively block the current user request until the module finishes. This is the behavior to use for on_preload hooks. However , we strongly recommend the use of on_postload hooks to prevent any unwanted (see warning section above). The deregistration method expects the following arguments: module_id : The ID of the calling module. This information is given by IRIS when the register_hooks methods is called. iris_hook_name : The name of the hook to which unsubscribe. If the module is not subscribe to the specified hook the function returns without errors. Please see the modules documentation for more details on how to implement these methods.","title":"Subscribing and unsubscribing"},{"location":"development/hooks/#available-hooks","text":"The following hooks are natively available for subscription. Hook name Description on_preload_case_create Triggered on case creation, before commit in DB on_postload_case_create Triggered on case creation, after commit in DB on_preload_case_delete Triggered on case deletion, before commit in DB on_postload_case_delete Triggered on case deletion, after commit in DB on_preload_asset_create Triggered on asset creation, before commit in DB on_postload_asset_create Triggered on asset creation, after commit in DB on_preload_asset_update Triggered on asset update, before commit in DB on_postload_asset_update Triggered on asset update, after commit in DB on_preload_asset_delete Triggered on asset deletion, before commit in DB on_postload_asset_delete Triggered on asset deletion, after commit in DB on_manual_trigger_asset Triggered upon user action on_preload_note_create Triggered on note creation, before commit in DB on_postload_note_create Triggered on note creation, after commit in DB on_preload_note_update Triggered on note update, before commit in DB on_postload_note_update Triggered on note update, after commit in DB on_preload_note_delete Triggered on note deletion, before commit in DB on_postload_note_delete Triggered on note deletion, after commit in DB on_manual_trigger_note Triggered upon user action on_preload_ioc_create Triggered on ioc creation, before commit in DB on_postload_ioc_create Triggered on ioc creation, after commit in DB on_preload_ioc_update Triggered on ioc update, before commit in DB on_postload_ioc_update Triggered on ioc update, after commit in DB on_preload_ioc_delete Triggered on ioc deletion, before commit in DB on_postload_ioc_delete Triggered on ioc deletion, after commit in DB on_manual_trigger_ioc Triggered upon user action on_preload_event_create Triggered on event creation, before commit in DB on_postload_event_create Triggered on event creation, after commit in DB on_preload_event_update Triggered on event update, before commit in DB on_postload_event_update Triggered on event update, after commit in DB on_preload_event_delete Triggered on event deletion, before commit in DB on_postload_event_delete Triggered on event deletion, after commit in DB on_manual_trigger_event Triggered upon user action on_preload_evidence_create Triggered on evidence creation, before commit in DB on_postload_evidence_create Triggered on evidence creation, after commit in DB on_preload_evidence_update Triggered on evidence update, before commit in DB on_postload_evidence_update Triggered on evidence update, after commit in DB on_preload_evidence_delete Triggered on evidence deletion, before commit in DB on_postload_evidence_delete Triggered on evidence deletion, after commit in DB on_manual_trigger_evidence Triggered upon user action on_preload_task_create Triggered on task creation, before commit in DB on_postload_task_create Triggered on task creation, after commit in DB on_preload_task_update Triggered on task update, before commit in DB on_postload_task_update Triggered on task update, after commit in DB on_preload_task_delete Triggered on task deletion, before commit in DB on_postload_task_delete Triggered on task deletion, after commit in DB on_manual_trigger_task Triggered upon user action on_preload_global_task_create Triggered on global task creation, before commit in DB on_postload_global_task_create Triggered on global task creation, after commit in DB on_preload_global_task_update Triggered on task update, before commit in DB on_postload_global_task_update Triggered on global task update, after commit in DB on_preload_global_task_delete Triggered on task deletion, before commit in DB on_postload_global_task_delete Triggered on global task deletion, after commit in DB on_manual_trigger_global_task Triggered upon user action on_preload_report_create Triggered on report creation, before generation in DB on_postload_report_create Triggered on report creation, before download of the document on_preload_activities_report_create Triggered on activities report creation, before generation in DB on_postload_activities_report_create Triggered on activities report creation, before download of the document","title":"Available hooks"},{"location":"development/modules/","text":"Modules Introduction A DFIR-IRIS Module (DIM) is a Python package allowing to extend IRIS features. DIMs are not running constantly and are only called following specific actions done by users. We distinct two types of modules: Pipeline modules : Allow uploading and processing of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser). These are called when a user Update case and select evidences to process. Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). These are either called automatically upon specific events, or if a user manually triggers them. Except for some triggers for processor modules, all tasks provided by DIMs are run asynchronously in RabbitMQ tasks, so they don't impact the UI. Both types of DIMs have the same structure, they only differs in their configurations and how they handle the data they receive. For that purpose, every DIM inherit from a common class named IrisModuleInterface - available here - which provides the basic structure and methods of a module. Hint To quickly start writing a new module, one can follow these tutorials . Overview Modules are instantiated upon actions (hooks, triggers, user actions) and this occurs each time the said actions occur. It implies the initiation of a module has to be very quick. In most of the case, the __init__ method should not even be overwritten. They can live either in the worker or the web-app, depending on their type and action they are handling. They can also live in both. This implies multiple instances of the same module can run at the same time. The graph below shows two modules of different types running in the worker and interacting with external elements. Modules don't have to handle the task creations or resources locks. This is handled by IRIS. They just need to process the data they received and return results in a predefined manner. Common structure The section below describes the common structure of modules. Directory structure setup.py # Setup configuration to build the module README.md # README iris_example_name # Name of the package __init__.py # Declaration of the package and main class IrisExampleConfig.py # Configuration of the module to help keep the main file clean IrisExampleInterface.py # Main class of the module module_helper # Sub module containing the helper functions of the module helper.py # for instance access to ext resource, manipulation of data helper2.py # etc. The init .py file Iris loads the modules dynamically. To do so, it needs to know the name of the main class of the module and relies on __init__.py to find this information. __iris_module_interface = \"IrisEXAMPLEInterface\" Where IrisEXAMPLEInterface is the main class of the module and inherit of the base class IrisModuleInterface . Caution Failing to provide the main class in __init__.py or having the main class inherit from IrisModuleInterface will make IRIS fail each time it attempts to load the module. The module configuration Iris needs to know what the module is doing and what services it is providing. This is done via the attributes of the main class (let's say IrisEXAMPLEInterface ). The attributes are : _module_name : string - \"human\" name presented to users. _interface_version : float - version of IrisModuleInterface used. If the version is not supported, the server will refuse to register the module. _module_version : float - version of the module itself to help users keep tracks of evolutions. _module_type : string - Type of module. The available modules types are listed in IrisModuleInterface.IrisModuleTypes _pipeline_support : bool - should be set to True if it implements a pipeline process (aka module of type pipeline_module ). _pipeline_info : dict - contains the configuration of the pipeline. The following structure must be followed: pipeline_info = { # Name of the pipeline used for internal tracking. This # must be unique among all modules so pick something really unique \"pipeline_internal_name\" : \"example_pipeline\" , # The name of the pipeline presented to the user. Use something # that will help the users to identify the right pipeline \"pipeline_human_name\" : \"Example Pipeline\" , # Arguments presented to the users when they select the pipeline \"pipeline_args\" : [ [ 'some_index' , 'required' ], [ 'example_argument' , 'optional' ] ] } _module_configuration : A list of dict. The list contains each field needed by the module. This list is shown in the Iris webpage of the module configuration. Each field in an entry is mandatory. _module_configuration = [ { \"param_name\" : \"vt_api_key\" , \"param_human_name\" : \"VT API Key\" , \"param_description\" : \"Virus total API key\" , \"default\" : None , \"mandatory\" : True , \"type\" : \"sensitive_string\" }, { \"param_name\" : \"vt_key_is_premium\" , \"param_human_name\" : \"VT Key is premium\" , \"param_description\" : \"Set to True if the VT key is premium\" , \"default\" : False , \"mandatory\" : True , \"type\" : \"bool\" }, { \"param_name\" : \"vt_ip_assign_asn_as_tag\" , \"param_human_name\" : \"Assign ASN tag to IP\" , \"param_description\" : \"Assign a new tag to IOC IPs with the ASN fetched from VT\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The above example results in the following.","title":"Modules"},{"location":"development/modules/#modules","text":"","title":"Modules"},{"location":"development/modules/#introduction","text":"A DFIR-IRIS Module (DIM) is a Python package allowing to extend IRIS features. DIMs are not running constantly and are only called following specific actions done by users. We distinct two types of modules: Pipeline modules : Allow uploading and processing of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser). These are called when a user Update case and select evidences to process. Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). These are either called automatically upon specific events, or if a user manually triggers them. Except for some triggers for processor modules, all tasks provided by DIMs are run asynchronously in RabbitMQ tasks, so they don't impact the UI. Both types of DIMs have the same structure, they only differs in their configurations and how they handle the data they receive. For that purpose, every DIM inherit from a common class named IrisModuleInterface - available here - which provides the basic structure and methods of a module. Hint To quickly start writing a new module, one can follow these tutorials .","title":"Introduction"},{"location":"development/modules/#overview","text":"Modules are instantiated upon actions (hooks, triggers, user actions) and this occurs each time the said actions occur. It implies the initiation of a module has to be very quick. In most of the case, the __init__ method should not even be overwritten. They can live either in the worker or the web-app, depending on their type and action they are handling. They can also live in both. This implies multiple instances of the same module can run at the same time. The graph below shows two modules of different types running in the worker and interacting with external elements. Modules don't have to handle the task creations or resources locks. This is handled by IRIS. They just need to process the data they received and return results in a predefined manner.","title":"Overview"},{"location":"development/modules/#common-structure","text":"The section below describes the common structure of modules.","title":"Common structure"},{"location":"development/modules/#directory-structure","text":"setup.py # Setup configuration to build the module README.md # README iris_example_name # Name of the package __init__.py # Declaration of the package and main class IrisExampleConfig.py # Configuration of the module to help keep the main file clean IrisExampleInterface.py # Main class of the module module_helper # Sub module containing the helper functions of the module helper.py # for instance access to ext resource, manipulation of data helper2.py # etc.","title":"Directory structure"},{"location":"development/modules/#the-initpy-file","text":"Iris loads the modules dynamically. To do so, it needs to know the name of the main class of the module and relies on __init__.py to find this information. __iris_module_interface = \"IrisEXAMPLEInterface\" Where IrisEXAMPLEInterface is the main class of the module and inherit of the base class IrisModuleInterface . Caution Failing to provide the main class in __init__.py or having the main class inherit from IrisModuleInterface will make IRIS fail each time it attempts to load the module.","title":"The init.py file"},{"location":"development/modules/#the-module-configuration","text":"Iris needs to know what the module is doing and what services it is providing. This is done via the attributes of the main class (let's say IrisEXAMPLEInterface ). The attributes are : _module_name : string - \"human\" name presented to users. _interface_version : float - version of IrisModuleInterface used. If the version is not supported, the server will refuse to register the module. _module_version : float - version of the module itself to help users keep tracks of evolutions. _module_type : string - Type of module. The available modules types are listed in IrisModuleInterface.IrisModuleTypes _pipeline_support : bool - should be set to True if it implements a pipeline process (aka module of type pipeline_module ). _pipeline_info : dict - contains the configuration of the pipeline. The following structure must be followed: pipeline_info = { # Name of the pipeline used for internal tracking. This # must be unique among all modules so pick something really unique \"pipeline_internal_name\" : \"example_pipeline\" , # The name of the pipeline presented to the user. Use something # that will help the users to identify the right pipeline \"pipeline_human_name\" : \"Example Pipeline\" , # Arguments presented to the users when they select the pipeline \"pipeline_args\" : [ [ 'some_index' , 'required' ], [ 'example_argument' , 'optional' ] ] } _module_configuration : A list of dict. The list contains each field needed by the module. This list is shown in the Iris webpage of the module configuration. Each field in an entry is mandatory. _module_configuration = [ { \"param_name\" : \"vt_api_key\" , \"param_human_name\" : \"VT API Key\" , \"param_description\" : \"Virus total API key\" , \"default\" : None , \"mandatory\" : True , \"type\" : \"sensitive_string\" }, { \"param_name\" : \"vt_key_is_premium\" , \"param_human_name\" : \"VT Key is premium\" , \"param_description\" : \"Set to True if the VT key is premium\" , \"default\" : False , \"mandatory\" : True , \"type\" : \"bool\" }, { \"param_name\" : \"vt_ip_assign_asn_as_tag\" , \"param_human_name\" : \"Assign ASN tag to IP\" , \"param_description\" : \"Assign a new tag to IOC IPs with the ASN fetched from VT\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The above example results in the following.","title":"The module configuration"},{"location":"development/quick_start/processor/","text":"Processor modules In this tutorial, we demonstrate the steps to write a basic processor module which subscribes to a hook, and log what it receives when the hook is triggered. We will also add a configuration setting to offer our users the ability disable this feature. We'll call it IrisDummyModule . Project structure overview As described in the development module main page , the module should have the following structure. setup . py # Setup configuration to build the module README . md # README iris_dummy_module # Name of the package __init__ . py # Declaration of the package and main class IrisDummyConfig . py # Configuration of the module to help keep the main file clean IrisDummyInterface . py # Main class of the module While the module could have only one main file IrisDummyInterface.py , we recommend splitting its configuration into a new configuration file (here IrisDummyConfig.py ) to keep the code clear. There is no mandatory naming convention for the files or the class or the methods. We chose this one to keep things clear, and we recommend following the same. But it's up to you really. We will walk over these files one by one during this tutorial. Creating the interface The interface is the code that talks with IRIS. It implements methods that call and are called by the server. It needs to inherit IrisModuleInterface class from the IrisModuleInterface package . This module handles most of the methods needed by IRIS to recognize, set up and call the module. By inheriting this class in our interface, we avoid writing that part ourselves. Let's write our basic interface class. The name of the file has to be the name of the main class, that's the only constraint. We'll see later on why. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): pass That's it ! Actually this class is not doing anything right now. We'll need to add a few methods to register our hook later. But first we need to indicate to IRIS what is our main interface class. Remember, there is no convention restriction, so IRIS has no way to know which class it should instantiate to call our module. To do so, we need to set a specific variable in our __init__.py . iris_dummy_module/__init__.py # Set the __iris_module_interface variable to the name of our main class. # When IRIS instantiate the python module, it looks for \"module.__iris_module_interface\" # And then tries to instantiate the class \"__iris_module_interface.__iris_module_interface\", here 'IrisDummyModule.IrisDummyModule'. # That's why the python file must have the same name as the class. __iris_module_interface = \"IrisDummyModule\" Our module is now recognizable by IRIS Pretty simple right ? Writing the configuration The next step is to describe what the module is doing, its name, it's configuration, etc. This is done by overwriting predefines variables of the IrisModuleInterface class. Let's create our Python configuration file and go through each variables. iris_dummy_module/IrisDummyConfig.py # Import the module types list, so we can indicate the type of our module from iris_interface.IrisModuleInterface import IrisModuleTypes # Human name displayed in the GUI Manage > Modules. This can be anything, # but try to put something meaningful, so users recognize your module. module_name = \"IrisDummy\" # Description displayed when editing the module configuration in the UI. # This can be anything, module_description = \"Provides a dummy module that replies to one hook\" # Set the interface version used. This needs to be the version of # the IrisModuleInterface package. This version is check by the server to # to ensure our module can run on this specific server interface_version = 1.1 # The version of the module itself, it can be anything module_version = 1.0 # The type of the module, here processor module_type = IrisModuleTypes . module_processor # Our module is a processor type, so it doesn't offer any pipeline pipeline_support = False # Provide no pipeline information as our module don't implement any pipeline_info = {} # The configuration of the module that will be displayed and configurable # by administrators on the UI. This describes every parameter that can # be set. module_configuration = [ { \"param_name\" : \"log_received_hook\" , \"param_human_name\" : \"Log received hook\" , \"param_description\" : \"Logs a message upon hook receiving if set to true. Otherwise do nothing.\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The module configuration parameters are the following : param_name : The internal parameter name. This will be used by the module itself to fetch the value when needed. param_human_name : The name displayed on the UI for this specific parameter param_description : A description explaining what this parameter is doing to help administrators default : The default value of our parameter. Here we set to True, so after install our module is already configured and ready to log the hook. mandatory : Indicates whether the parameter is mandatory or not. If set to True and no value is provided (either by admin or by default), the module is automatically disabled by IRIS type : The type of parameter. Here a boolean, which will be rendered under the form of a checkbox. A module can have as many parameters as it needs. We now need to update our main class to set this configuration. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type pass Done ! The module is now providing enough information to IRIS, so it knows exactly what our module do and what needs to be called to run it. However, our module is still doing nothing. Let's make it subscribe to an IRIS hook. Subscribing to a hook Hooks allow to be notified by IRIS when a specific event occurs (IOC creation, deletion, etc). For a comprehensive description of hooks, please see the Hooks section of this documentation. The registration (or subscription) to a hook occurs at two moments during the life of a module : When the module is added to IRIS When the configuration of the module is changed by an Admin. This allows dynamic subscription and deregistration of hooks depending on the config. These registration/deregistration events are triggered by IRIS, and are propagated to modules through the IrisModuleInterface method register_hooks [ ref ]. To register to a hook, we need to override this method and register our hook within this method. To do so, IrisModuleInterface offers us another method register_to_hook [ ref ], which we can call for each hook we want to subscribe. Here is a summary of the events : IRIS calls register_hooks of our module. This indicates it is time for us to register our hooks. Within this method, we call register_to_hook for each hook we want to subscribe Let's add this to our main class and register to the on_postload_ioc_create . This will notify use each time a new IOC is created and committed to the database. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) That's it ! Our module has now officially subscribed to a hook and will be notified each time an IOC is created. So how the module is notified ? Once again this is done by a method named hooks_handler [ ref ] that IrisModuleInterface provides, and we need to overwrite. This method is called each time one of the event associated to the hook we subscribed is triggered. It provides the name of the hook and as well as the data associated to it. By overwriting this method, we can process the hook and the data ! We will add a condition in this method, that is if the administrator set the module parameter log_received_hook to False, then the module won't log anything and simply return the data. Hint The current configuration of the module can be accessed with the attribute self._dict_conf . iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) def hooks_handler ( self , hook_name : str , data ): \"\"\" Called by IRIS each time one of our hook is triggered. \"\"\" # read the current configuration and only log the call if # our parameter is set to true if self . _dict_conf . get ( 'log_received_hook' ) is True : self . log . info ( f 'Received { hook_name } ' ) self . log . info ( f 'Received data of type { type ( data ) } ' ) # Return a standardized message to IRIS saying that everything is ok. # logs=list(self.message_queue) is needed, so the users can see the logs # our module generated during its execution. return InterfaceStatus . I2Success ( data = data , logs = list ( self . message_queue )) We are done ! Our module is now fully ready to register, subscribe to a hook and act when notified.","title":"Processor modules"},{"location":"development/quick_start/processor/#processor-modules","text":"In this tutorial, we demonstrate the steps to write a basic processor module which subscribes to a hook, and log what it receives when the hook is triggered. We will also add a configuration setting to offer our users the ability disable this feature. We'll call it IrisDummyModule .","title":"Processor modules"},{"location":"development/quick_start/processor/#project-structure-overview","text":"As described in the development module main page , the module should have the following structure. setup . py # Setup configuration to build the module README . md # README iris_dummy_module # Name of the package __init__ . py # Declaration of the package and main class IrisDummyConfig . py # Configuration of the module to help keep the main file clean IrisDummyInterface . py # Main class of the module While the module could have only one main file IrisDummyInterface.py , we recommend splitting its configuration into a new configuration file (here IrisDummyConfig.py ) to keep the code clear. There is no mandatory naming convention for the files or the class or the methods. We chose this one to keep things clear, and we recommend following the same. But it's up to you really. We will walk over these files one by one during this tutorial.","title":"Project structure overview"},{"location":"development/quick_start/processor/#creating-the-interface","text":"The interface is the code that talks with IRIS. It implements methods that call and are called by the server. It needs to inherit IrisModuleInterface class from the IrisModuleInterface package . This module handles most of the methods needed by IRIS to recognize, set up and call the module. By inheriting this class in our interface, we avoid writing that part ourselves. Let's write our basic interface class. The name of the file has to be the name of the main class, that's the only constraint. We'll see later on why. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): pass That's it ! Actually this class is not doing anything right now. We'll need to add a few methods to register our hook later. But first we need to indicate to IRIS what is our main interface class. Remember, there is no convention restriction, so IRIS has no way to know which class it should instantiate to call our module. To do so, we need to set a specific variable in our __init__.py . iris_dummy_module/__init__.py # Set the __iris_module_interface variable to the name of our main class. # When IRIS instantiate the python module, it looks for \"module.__iris_module_interface\" # And then tries to instantiate the class \"__iris_module_interface.__iris_module_interface\", here 'IrisDummyModule.IrisDummyModule'. # That's why the python file must have the same name as the class. __iris_module_interface = \"IrisDummyModule\" Our module is now recognizable by IRIS Pretty simple right ?","title":"Creating the interface"},{"location":"development/quick_start/processor/#writing-the-configuration","text":"The next step is to describe what the module is doing, its name, it's configuration, etc. This is done by overwriting predefines variables of the IrisModuleInterface class. Let's create our Python configuration file and go through each variables. iris_dummy_module/IrisDummyConfig.py # Import the module types list, so we can indicate the type of our module from iris_interface.IrisModuleInterface import IrisModuleTypes # Human name displayed in the GUI Manage > Modules. This can be anything, # but try to put something meaningful, so users recognize your module. module_name = \"IrisDummy\" # Description displayed when editing the module configuration in the UI. # This can be anything, module_description = \"Provides a dummy module that replies to one hook\" # Set the interface version used. This needs to be the version of # the IrisModuleInterface package. This version is check by the server to # to ensure our module can run on this specific server interface_version = 1.1 # The version of the module itself, it can be anything module_version = 1.0 # The type of the module, here processor module_type = IrisModuleTypes . module_processor # Our module is a processor type, so it doesn't offer any pipeline pipeline_support = False # Provide no pipeline information as our module don't implement any pipeline_info = {} # The configuration of the module that will be displayed and configurable # by administrators on the UI. This describes every parameter that can # be set. module_configuration = [ { \"param_name\" : \"log_received_hook\" , \"param_human_name\" : \"Log received hook\" , \"param_description\" : \"Logs a message upon hook receiving if set to true. Otherwise do nothing.\" , \"default\" : True , \"mandatory\" : True , \"type\" : \"bool\" } ] The module configuration parameters are the following : param_name : The internal parameter name. This will be used by the module itself to fetch the value when needed. param_human_name : The name displayed on the UI for this specific parameter param_description : A description explaining what this parameter is doing to help administrators default : The default value of our parameter. Here we set to True, so after install our module is already configured and ready to log the hook. mandatory : Indicates whether the parameter is mandatory or not. If set to True and no value is provided (either by admin or by default), the module is automatically disabled by IRIS type : The type of parameter. Here a boolean, which will be rendered under the form of a checkbox. A module can have as many parameters as it needs. We now need to update our main class to set this configuration. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type pass Done ! The module is now providing enough information to IRIS, so it knows exactly what our module do and what needs to be called to run it. However, our module is still doing nothing. Let's make it subscribe to an IRIS hook.","title":"Writing the configuration"},{"location":"development/quick_start/processor/#subscribing-to-a-hook","text":"Hooks allow to be notified by IRIS when a specific event occurs (IOC creation, deletion, etc). For a comprehensive description of hooks, please see the Hooks section of this documentation. The registration (or subscription) to a hook occurs at two moments during the life of a module : When the module is added to IRIS When the configuration of the module is changed by an Admin. This allows dynamic subscription and deregistration of hooks depending on the config. These registration/deregistration events are triggered by IRIS, and are propagated to modules through the IrisModuleInterface method register_hooks [ ref ]. To register to a hook, we need to override this method and register our hook within this method. To do so, IrisModuleInterface offers us another method register_to_hook [ ref ], which we can call for each hook we want to subscribe. Here is a summary of the events : IRIS calls register_hooks of our module. This indicates it is time for us to register our hooks. Within this method, we call register_to_hook for each hook we want to subscribe Let's add this to our main class and register to the on_postload_ioc_create . This will notify use each time a new IOC is created and committed to the database. iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) That's it ! Our module has now officially subscribed to a hook and will be notified each time an IOC is created. So how the module is notified ? Once again this is done by a method named hooks_handler [ ref ] that IrisModuleInterface provides, and we need to overwrite. This method is called each time one of the event associated to the hook we subscribed is triggered. It provides the name of the hook and as well as the data associated to it. By overwriting this method, we can process the hook and the data ! We will add a condition in this method, that is if the administrator set the module parameter log_received_hook to False, then the module won't log anything and simply return the data. Hint The current configuration of the module can be accessed with the attribute self._dict_conf . iris_dummy_module/IrisDummyInterface.py #!/usr/bin/env python3 # Import the IrisInterface class from iris_interface.IrisModuleInterface import IrisModuleInterface # Create our module class class IrisDummyModule ( IrisModuleInterface ): # Set the configuration _module_name = interface_conf . module_name _module_description = interface_conf . module_description _interface_version = interface_conf . interface_version _module_version = interface_conf . module_version _pipeline_support = interface_conf . pipeline_support _pipeline_info = interface_conf . pipeline_info _module_configuration = interface_conf . module_configuration _module_type = interface_conf . module_type def register_hooks ( self , module_id : int ): \"\"\" Called by IRIS indicating it's time to register hooks. :param module_id: Module ID provided by IRIS. \"\"\" # Call the hook registration method. We need to pass the # the module_id to this method, otherwise IRIS won't know # to whom associate the hook. # The hook name needs to be a well known hook name by IRIS. status = self . register_to_hook ( module_id , iris_hook_name = 'on_postload_ioc_create' ) if status . is_failure (): # If we have a failure, log something out self . log . error ( status . get_message ()) else : # Log that we successfully registered to the hook self . log . info ( f \"Successfully subscribed to on_postload_ioc_create hook\" ) def hooks_handler ( self , hook_name : str , data ): \"\"\" Called by IRIS each time one of our hook is triggered. \"\"\" # read the current configuration and only log the call if # our parameter is set to true if self . _dict_conf . get ( 'log_received_hook' ) is True : self . log . info ( f 'Received { hook_name } ' ) self . log . info ( f 'Received data of type { type ( data ) } ' ) # Return a standardized message to IRIS saying that everything is ok. # logs=list(self.message_queue) is needed, so the users can see the logs # our module generated during its execution. return InterfaceStatus . I2Success ( data = data , logs = list ( self . message_queue )) We are done ! Our module is now fully ready to register, subscribe to a hook and act when notified.","title":"Subscribing to a hook"},{"location":"operations/api/","text":"API Iris is meant to be plug-able and be integrated with the existing environments. Through the REST API, one can do almost as much as it is possible to do through the web interface. Under the hood, the web interface is actually talking to the API. API Keys The first step is to obtain an API key. Each user is automatically attributed one when it is created. It can be found on the left panel, under username and My Settings. Token exposure In case the token is exposed and needs to be change, a new one can be generated with the Renew option. Renewing a token revokes the previous. References The API constantly evolves with IRIS and thus multiple versions exists. Use the references below to check which API version applies to your Iris version. Starting from Iris v1.4.0, the supported API version can also be checked in the UI Advanced > Server settings . IRIS Version API Version & Reference v1.2.0 API v1.0.0 v1.2.1 API v1.0.0 v1.3.0 API v1.0.1 v1.3.1 API v1.0.1 v1.4.0 API v1.0.2 How to use The API token is used as a Bearer and needs to be present in the header Authorization when issuing requests. For example, to list all the cases: curl --request GET \\ --url http://localhost:8000/manage/cases/list \\ --header 'Authorization: Bearer mWpCUVNzBMU5EnbIAK50jLPhYjKBTHZjobdogc_n_yixpJTmt9tzAf8WYDI7m5XgB9wCJnlaXlHIh9RZjtp2fA' \\ --header 'Content-Type: application/json' The only way to revoke a token is to renew the current one. Once done, the previous API token does not exist anymore on the database and it becomes ineffective. A Python client is available here to ease the automation.","title":"API"},{"location":"operations/api/#api","text":"Iris is meant to be plug-able and be integrated with the existing environments. Through the REST API, one can do almost as much as it is possible to do through the web interface. Under the hood, the web interface is actually talking to the API.","title":"API"},{"location":"operations/api/#api-keys","text":"The first step is to obtain an API key. Each user is automatically attributed one when it is created. It can be found on the left panel, under username and My Settings. Token exposure In case the token is exposed and needs to be change, a new one can be generated with the Renew option. Renewing a token revokes the previous.","title":"API Keys"},{"location":"operations/api/#references","text":"The API constantly evolves with IRIS and thus multiple versions exists. Use the references below to check which API version applies to your Iris version. Starting from Iris v1.4.0, the supported API version can also be checked in the UI Advanced > Server settings . IRIS Version API Version & Reference v1.2.0 API v1.0.0 v1.2.1 API v1.0.0 v1.3.0 API v1.0.1 v1.3.1 API v1.0.1 v1.4.0 API v1.0.2","title":"References"},{"location":"operations/api/#how-to-use","text":"The API token is used as a Bearer and needs to be present in the header Authorization when issuing requests. For example, to list all the cases: curl --request GET \\ --url http://localhost:8000/manage/cases/list \\ --header 'Authorization: Bearer mWpCUVNzBMU5EnbIAK50jLPhYjKBTHZjobdogc_n_yixpJTmt9tzAf8WYDI7m5XgB9wCJnlaXlHIh9RZjtp2fA' \\ --header 'Content-Type: application/json' The only way to revoke a token is to renew the current one. Once done, the previous API token does not exist anymore on the database and it becomes ineffective. A Python client is available here to ease the automation.","title":"How to use"},{"location":"operations/custom_attributes/","text":"Custom Attributes Introduced in IRIS v1.4.0 All the case objects can be extended with custom attributes. These attributes can be added by : Administrators via the GUI Modules (for instance, the VT module adds a VT Report attribute to each objects it analyses) Attributes offer the ability to : Add inputs for analysts to fill additional details Add static/dynamic content such as HTML/JS for enhanced possibilities. This section only describes how an administrator can add or delete attributes to an object. Management page Custom attributes can be changed in the Advanced > Objects Attributes section on the left panel. The page lists the objects for which custom attributes can be added or modified. Cases Customers Evidences Notes Tasks Assets Events IOC Attributes structure Attributes are defined in JSON which describes tabs and fields that makes the attributes. { \"Tab Name 1\" : { // De f i nes a ne w ta b \"Field 1\" : { // De f i nes a ne w f ield wi t hi n t he Tab Name 1 \"type\" : \"input_string\" , // De f i nes t he t ype o f f ield , here a s tan dard s tr i n g i n pu t \"mandatory\" : true , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y }, \"Field 2\" : { // De f i nes a seco n d f ield wi t hi n t he ta b Tab Name 1 \"type\" : \"input_checkbox\" , // De f i nes a n i n pu t checkbox \"mandatory\" : false , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y } }, \"VT report\" : { // De f i nes a seco n d ta b na med VT repor t \"Content\" : { // De f i nes a ne w f ield Co ntent wi t hi n t he VT Repor t \"type\" : \"html\" , // De f i nes a n HTML i nter pre te d co ntent \"value\" : \"\" // De fault value i f a n y , else emp t y } } } The code above would be rendered as : With : The native information of the object. This cannot be changed or updated The new attribute Tab Name 1 The other new attribute VT report Attributes taxonomy The available fields type are available for rendering : input_string : Standard input text input_textfield : Standard input textfield input_checkbox : Standard checkbox input_date : Standard date input input_datetime : Standard date and time input input_select : Standard select input. Need \"options\" tag to describe the available options, as a list of string. raw : A static content rendered in raw text. HTML is not be interpreted. html : A static content rendered as HTML. This is by nature prone to abuse, but at the same time allows adding custom JS scripts. Updating / resetting attributes When an attribute is updated, it will try to update all the existing objects with the new attributes. To prevent any data loss from previous attributes and attributes pushed by modules, the update is only made on attributes which don't have any values set or are type-compatibles (ie string to textfield). The migration of an attribute can however be forced in two ways, both resulting in potential attributes data loss. Good to know Migrating or overwriting attributes never change the native information of an object. It only applies to custom attributes. Partial overwrite basically resets all the values of every target objects that matches the current attribute definition. All associated values are lost. This does not impact attributes pushed by modules or previous configuration. Complete overwrite resets all attributes of every target objects, including the ones created by modules, and then applies the current attributes. All associated values are lost.","title":"Custom Attributes"},{"location":"operations/custom_attributes/#custom-attributes","text":"Introduced in IRIS v1.4.0 All the case objects can be extended with custom attributes. These attributes can be added by : Administrators via the GUI Modules (for instance, the VT module adds a VT Report attribute to each objects it analyses) Attributes offer the ability to : Add inputs for analysts to fill additional details Add static/dynamic content such as HTML/JS for enhanced possibilities. This section only describes how an administrator can add or delete attributes to an object.","title":"Custom Attributes"},{"location":"operations/custom_attributes/#management-page","text":"Custom attributes can be changed in the Advanced > Objects Attributes section on the left panel. The page lists the objects for which custom attributes can be added or modified. Cases Customers Evidences Notes Tasks Assets Events IOC","title":"Management page"},{"location":"operations/custom_attributes/#attributes-structure","text":"Attributes are defined in JSON which describes tabs and fields that makes the attributes. { \"Tab Name 1\" : { // De f i nes a ne w ta b \"Field 1\" : { // De f i nes a ne w f ield wi t hi n t he Tab Name 1 \"type\" : \"input_string\" , // De f i nes t he t ype o f f ield , here a s tan dard s tr i n g i n pu t \"mandatory\" : true , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y }, \"Field 2\" : { // De f i nes a seco n d f ield wi t hi n t he ta b Tab Name 1 \"type\" : \"input_checkbox\" , // De f i nes a n i n pu t checkbox \"mandatory\" : false , // I n dica tes whe t her t he f ield is ma n da t ory upo n savi n g \"value\" : \"\" // De fault value i f a n y , else emp t y } }, \"VT report\" : { // De f i nes a seco n d ta b na med VT repor t \"Content\" : { // De f i nes a ne w f ield Co ntent wi t hi n t he VT Repor t \"type\" : \"html\" , // De f i nes a n HTML i nter pre te d co ntent \"value\" : \"\" // De fault value i f a n y , else emp t y } } } The code above would be rendered as : With : The native information of the object. This cannot be changed or updated The new attribute Tab Name 1 The other new attribute VT report","title":"Attributes structure"},{"location":"operations/custom_attributes/#attributes-taxonomy","text":"The available fields type are available for rendering : input_string : Standard input text input_textfield : Standard input textfield input_checkbox : Standard checkbox input_date : Standard date input input_datetime : Standard date and time input input_select : Standard select input. Need \"options\" tag to describe the available options, as a list of string. raw : A static content rendered in raw text. HTML is not be interpreted. html : A static content rendered as HTML. This is by nature prone to abuse, but at the same time allows adding custom JS scripts.","title":"Attributes taxonomy"},{"location":"operations/custom_attributes/#updating-resetting-attributes","text":"When an attribute is updated, it will try to update all the existing objects with the new attributes. To prevent any data loss from previous attributes and attributes pushed by modules, the update is only made on attributes which don't have any values set or are type-compatibles (ie string to textfield). The migration of an attribute can however be forced in two ways, both resulting in potential attributes data loss. Good to know Migrating or overwriting attributes never change the native information of an object. It only applies to custom attributes. Partial overwrite basically resets all the values of every target objects that matches the current attribute definition. All associated values are lost. This does not impact attributes pushed by modules or previous configuration. Complete overwrite resets all attributes of every target objects, including the ones created by modules, and then applies the current attributes. All associated values are lost.","title":"Updating / resetting attributes"},{"location":"operations/modules/","text":"Modules IRIS can be extended with modules. They can be split in two types: Pipeline modules : Allow upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser) Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). Modules (or DIM - DFIR-IRIS Modules) are actually Python packages which must be installed in the Python environment of iris-webapp and the worker (see Quick Start). Once installed in the Python environment, modules can be managed in Advanced > Modules . Info This section is only available for users with the Admin role. By default IRIS embeds multiple DIMs. IrisEVTXModule (installed but not registered) IrisVTModule (installed and registered) IrisMispModule (installed and registered) Let's take IrisEVTXModule one to explain how one can add and use a new module. Module management To add a module, the user can click on the \"+\" button: Then the user must enter the name of the pre-installed module. The name of the pip package must be used. If everything is ok, the module will appear on the list. It is currently disabled, and needs configuration before it can be enabled. To do so, the user can click on the module's name: A new text box appears, showing information about the module, and a list of parameters to configure. Each mandatory parameter must be configured to enable the module. After configuring all the mandatory parameters, the \"Enable button\" is revealed and the user can finally enable the module. That's all! The user can confirm in the summary that the module is indeed enabled and ready to use. Finally, the user can either disable or remove the module by clicking on the according buttons. Now that the module is configured and enabled, let's see how we can use it! NB: As a temporary fix, after adding and configuring a module, one must restart the IRIS services (dockers) else the worker won't have the module installed properly. How to use the module As stated in the beginning, a module extends the capabilities of IRIS. For now, it allows importing evidences of your needs into what we call a pipeline, where data will be handled in the module (checking, parsing, ingestion...). In our provided module, IrisEVTXModule ingest EVTX files, parse them as JSON, and send the results to a Splunk instance using its HTTP event collector (HEC) endpoint. In IRIS, the files are always imported in the context of a case. To import a file, the user can click on Manage cases then Update tab. In Processing pipeline , the user can pick a pipeline that will send the files to the wanted module. In our example, EVTX pipeline refers to the IrisEVTXModule module. Below, the user can fill the arguments needed by the according pipeline. Arguments can be optional. Finally, the user can import one or several files and click Update to start their processing by the module. You can see in the picture below that the user will import four EVTX files. The user can follow the upload of the different files with their respective progress bars. Once uploaded, the status of the task can be observed on the DIM Tasks page. Clicking on a Task ID shows information on the task processing. After the processing of the files by the module, the list of the imported files is stored in the Evidences tab of the according case.","title":"Modules"},{"location":"operations/modules/#modules","text":"IRIS can be extended with modules. They can be split in two types: Pipeline modules : Allow upload and process of evidences through modular pipelines (eg: EVTX parsing and injection into a database or data visualiser) Processor modules : Allow processing of IRIS data upon predefined actions / hooks. (eg: be notified when a new IOC is created and get VT/MISP insights for it). Modules (or DIM - DFIR-IRIS Modules) are actually Python packages which must be installed in the Python environment of iris-webapp and the worker (see Quick Start). Once installed in the Python environment, modules can be managed in Advanced > Modules . Info This section is only available for users with the Admin role. By default IRIS embeds multiple DIMs. IrisEVTXModule (installed but not registered) IrisVTModule (installed and registered) IrisMispModule (installed and registered) Let's take IrisEVTXModule one to explain how one can add and use a new module.","title":"Modules"},{"location":"operations/modules/#module-management","text":"To add a module, the user can click on the \"+\" button: Then the user must enter the name of the pre-installed module. The name of the pip package must be used. If everything is ok, the module will appear on the list. It is currently disabled, and needs configuration before it can be enabled. To do so, the user can click on the module's name: A new text box appears, showing information about the module, and a list of parameters to configure. Each mandatory parameter must be configured to enable the module. After configuring all the mandatory parameters, the \"Enable button\" is revealed and the user can finally enable the module. That's all! The user can confirm in the summary that the module is indeed enabled and ready to use. Finally, the user can either disable or remove the module by clicking on the according buttons. Now that the module is configured and enabled, let's see how we can use it! NB: As a temporary fix, after adding and configuring a module, one must restart the IRIS services (dockers) else the worker won't have the module installed properly.","title":"Module management"},{"location":"operations/modules/#how-to-use-the-module","text":"As stated in the beginning, a module extends the capabilities of IRIS. For now, it allows importing evidences of your needs into what we call a pipeline, where data will be handled in the module (checking, parsing, ingestion...). In our provided module, IrisEVTXModule ingest EVTX files, parse them as JSON, and send the results to a Splunk instance using its HTTP event collector (HEC) endpoint. In IRIS, the files are always imported in the context of a case. To import a file, the user can click on Manage cases then Update tab. In Processing pipeline , the user can pick a pipeline that will send the files to the wanted module. In our example, EVTX pipeline refers to the IrisEVTXModule module. Below, the user can fill the arguments needed by the according pipeline. Arguments can be optional. Finally, the user can import one or several files and click Update to start their processing by the module. You can see in the picture below that the user will import four EVTX files. The user can follow the upload of the different files with their respective progress bars. Once uploaded, the status of the task can be observed on the DIM Tasks page. Clicking on a Task ID shows information on the task processing. After the processing of the files by the module, the list of the imported files is stored in the Evidences tab of the according case.","title":"How to use the module"},{"location":"operations/reports/","text":"Reports Iris has the ability to generate reports based on the data of an investigation. The reports templates can be managed in Advanced > Templates . Info This section is only available for users with the Admin role. Structure of templates Reports templates are made of tags, which are then processed and filed by the template engine of Iris. The templates can have any forms as soon as they respect the tags. An example of report is available in the source code of Iris, source > app > templates > docx_reports . The following tags are available. None are mandatory. If a tag is mistyped, the generation step will produce an error message. Hint Standard objects are accessible with {{ objectname }} . List objects can be looped: {% for object in object_list %} {{ object.attribute }} {% endfor %} case.name : Name of the case case.description : Description of the case case.open_date : Case open date case.close_date : Case close date case.opened_by : User that initially opened the case case.for_customer : Customer linked to the case case.soc_id : SOC ID number linked to the case evidences : List of evidence objects (see below - given evidence as loop variable) evidence.filename : File name of the evidence evidence.date_added : Date of registration evidence.file_hash : Hash of the evidence evidence.added_by : User who added the evidence iocs : List of IOCs objects (see below - given ioc as loop variable) ioc.ioc_value : Value of the IOC ioc.ioc_description : Description of the IOC ioc.ioc_type : Type of IOC ioc.ioc_tags : Tags linked to the IOC notes : List of notes objects (see below - given note as loop variable) note.note_title : Title of the note note.note_content : Content of the note note.note_creationdate : Creation date of the note note.note_lastupdate : Date of last update tasks : List of tasks objects (see below - given task as loop variable) task.task_title : Title of the task task.task_description : Description of the task task.task_open_date : Open date of the task task.task_last_update : Last update of the task task.task_close_date : Date of closure task.task_status : Status of the task task.task_tags : Task for the tags timeline : List of events objects (see below - given event as loop variable) event.event_title : Title of the event event.event_content : Content of the event event.event_raw : Raw content of the event event.event_date : Date when the event happened event.event_source : Source of the event event.category : Category of the event event.event_tags : Tags of the events event.last_edited_by : User who last edited the event event.assets : List of assets names linked to the event","title":"Reports"},{"location":"operations/reports/#reports","text":"Iris has the ability to generate reports based on the data of an investigation. The reports templates can be managed in Advanced > Templates . Info This section is only available for users with the Admin role.","title":"Reports"},{"location":"operations/reports/#structure-of-templates","text":"Reports templates are made of tags, which are then processed and filed by the template engine of Iris. The templates can have any forms as soon as they respect the tags. An example of report is available in the source code of Iris, source > app > templates > docx_reports . The following tags are available. None are mandatory. If a tag is mistyped, the generation step will produce an error message. Hint Standard objects are accessible with {{ objectname }} . List objects can be looped: {% for object in object_list %} {{ object.attribute }} {% endfor %} case.name : Name of the case case.description : Description of the case case.open_date : Case open date case.close_date : Case close date case.opened_by : User that initially opened the case case.for_customer : Customer linked to the case case.soc_id : SOC ID number linked to the case evidences : List of evidence objects (see below - given evidence as loop variable) evidence.filename : File name of the evidence evidence.date_added : Date of registration evidence.file_hash : Hash of the evidence evidence.added_by : User who added the evidence iocs : List of IOCs objects (see below - given ioc as loop variable) ioc.ioc_value : Value of the IOC ioc.ioc_description : Description of the IOC ioc.ioc_type : Type of IOC ioc.ioc_tags : Tags linked to the IOC notes : List of notes objects (see below - given note as loop variable) note.note_title : Title of the note note.note_content : Content of the note note.note_creationdate : Creation date of the note note.note_lastupdate : Date of last update tasks : List of tasks objects (see below - given task as loop variable) task.task_title : Title of the task task.task_description : Description of the task task.task_open_date : Open date of the task task.task_last_update : Last update of the task task.task_close_date : Date of closure task.task_status : Status of the task task.task_tags : Task for the tags timeline : List of events objects (see below - given event as loop variable) event.event_title : Title of the event event.event_content : Content of the event event.event_raw : Raw content of the event event.event_date : Date when the event happened event.event_source : Source of the event event.category : Category of the event event.event_tags : Tags of the events event.last_edited_by : User who last edited the event event.assets : List of assets names linked to the event","title":"Structure of templates"},{"location":"operations/tutorials/","text":"Tutorials Good to know These tutorials are based on IRIS v1.2.1 and offers only a basic overview of IRIS. New versions offer more features, not showcased on this page. Cases Create a new case Your browser does not support the video tag. Case summary Your browser does not support the video tag. Case notes Your browser does not support the video tag. Case IOCs Your browser does not support the video tag. Case assets Your browser does not support the video tag. Case timeline Your browser does not support the video tag. Case graph Your browser does not support the video tag. Case tasks Your browser does not support the video tag. Case evidences Your browser does not support the video tag. Case task logs Your browser does not support the video tag. Case reports Your browser does not support the video tag. Operations Global searches Your browser does not support the video tag.","title":"Tutorials"},{"location":"operations/tutorials/#tutorials","text":"Good to know These tutorials are based on IRIS v1.2.1 and offers only a basic overview of IRIS. New versions offer more features, not showcased on this page.","title":"Tutorials"},{"location":"operations/tutorials/#cases","text":"","title":"Cases"},{"location":"operations/tutorials/#create-a-new-case","text":"Your browser does not support the video tag.","title":"Create a new case"},{"location":"operations/tutorials/#case-summary","text":"Your browser does not support the video tag.","title":"Case summary"},{"location":"operations/tutorials/#case-notes","text":"Your browser does not support the video tag.","title":"Case notes"},{"location":"operations/tutorials/#case-iocs","text":"Your browser does not support the video tag.","title":"Case IOCs"},{"location":"operations/tutorials/#case-assets","text":"Your browser does not support the video tag.","title":"Case assets"},{"location":"operations/tutorials/#case-timeline","text":"Your browser does not support the video tag.","title":"Case timeline"},{"location":"operations/tutorials/#case-graph","text":"Your browser does not support the video tag.","title":"Case graph"},{"location":"operations/tutorials/#case-tasks","text":"Your browser does not support the video tag.","title":"Case tasks"},{"location":"operations/tutorials/#case-evidences","text":"Your browser does not support the video tag.","title":"Case evidences"},{"location":"operations/tutorials/#case-task-logs","text":"Your browser does not support the video tag.","title":"Case task logs"},{"location":"operations/tutorials/#case-reports","text":"Your browser does not support the video tag.","title":"Case reports"},{"location":"operations/tutorials/#operations","text":"","title":"Operations"},{"location":"operations/tutorials/#global-searches","text":"Your browser does not support the video tag.","title":"Global searches"},{"location":"operations/upgrades/","text":"Upgrades Most of the time, Iris handles upgrades of the database automatically when a new version is started, thus no specific actions are required. However , some breaking changes might need manual intervention. Please use the table below to assess if a manual action is required. From / To v1.2.1 v1.3.0 v1.3.1 v1.4.0 v1.2.1 X Auto Auto Action required - See v1.4.0 v1.3.0 X X Auto Action required - See v1.4.0 v1.3.1 X X X Action required - See v1.4.0 v1.4.0 X X X X Caution For production environments, it is highly recommended to make backups of the DB in case any issues occur during upgrades. Backing-up DB Only if you run in production and/or data is critical. List the current running docker containers docker container list Spot the IRIS DB container name or ID, and execute the backup docker exec <container> pg_dump -U postgres iris_db | \\ gzip > ../iris_db_backup.gz Ensure the backup was successful by looking at the gz file zcat ../iris_db_backup.gz | less Upgrading Stop the dockers docker-compose stop Remove the application dockers docker-compose rm app worker Get the last version of Iris git checkout master - or any tagged versions Build the new versions docker-compose build app worker --no-cache Run IRIS again. The app will handle the DB migration docker-compose up Rolling back In case something went wrong, you can rollback to your previous version and restore data. Remove the faulty docker DB docker-compose down db --volumes Checkout to the previous version working of IRIS Rebuild the images docker-compose build --no-cache Spin up the docker DB, and ONLY this one. docker-compose up db Get the ID or name of the docker DB docker container list Restore the DB data zcat ../iris_db_backup.gz | docker exec -i <container> psql -U postgres -d iris_db Spin up the rest of the dockers docker-compose up Your data should back. Version specific upgrades v1.4.0 This version brings breaking changes in the DB docker by adding a named volume instead of the default one. This implies that previous existing database is ignored as the new docker won't know which volume was previously used. To prevent this, please strictly follow the guide below . This will copy the data of the existing volume, to the new named one. Spot the IRIS DB container with docker container list . It should look like iris-web-db-x Fetch the current db volume ID ( name field with the command below) docker inspect <iris_db> | grep -A5 \"Mounts\" # Example of output \"Mounts\" : [ { \"Type\" : \"volume\" , \"Name\" : \"a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9\" , \"Source\" : \"/var/lib/docker/volumes/a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9/_data\" , \"Destination\" : \"/var/lib/postgresql/data\" , 3. Stop all the IRIS dockers : docker-compose stop 4. Create a new empty volume : docker volume create --name iris-web_db_data 5. Run a volume copy via a dummy image : docker run --rm -it -v <previous_db_volume_id>:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" # With the example of 2., this gives docker run --rm -it -v a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" 6. Pull the last changes from the repository, checkout to v1.4.0 , build and run. git pull origin git checkout v1.4.0 docker-compose build docker-compose up 7. The data should be successfully transferred.","title":"Upgrades"},{"location":"operations/upgrades/#upgrades","text":"Most of the time, Iris handles upgrades of the database automatically when a new version is started, thus no specific actions are required. However , some breaking changes might need manual intervention. Please use the table below to assess if a manual action is required. From / To v1.2.1 v1.3.0 v1.3.1 v1.4.0 v1.2.1 X Auto Auto Action required - See v1.4.0 v1.3.0 X X Auto Action required - See v1.4.0 v1.3.1 X X X Action required - See v1.4.0 v1.4.0 X X X X Caution For production environments, it is highly recommended to make backups of the DB in case any issues occur during upgrades.","title":"Upgrades"},{"location":"operations/upgrades/#backing-up-db","text":"Only if you run in production and/or data is critical. List the current running docker containers docker container list Spot the IRIS DB container name or ID, and execute the backup docker exec <container> pg_dump -U postgres iris_db | \\ gzip > ../iris_db_backup.gz Ensure the backup was successful by looking at the gz file zcat ../iris_db_backup.gz | less","title":"Backing-up DB"},{"location":"operations/upgrades/#upgrading","text":"Stop the dockers docker-compose stop Remove the application dockers docker-compose rm app worker Get the last version of Iris git checkout master - or any tagged versions Build the new versions docker-compose build app worker --no-cache Run IRIS again. The app will handle the DB migration docker-compose up","title":"Upgrading"},{"location":"operations/upgrades/#rolling-back","text":"In case something went wrong, you can rollback to your previous version and restore data. Remove the faulty docker DB docker-compose down db --volumes Checkout to the previous version working of IRIS Rebuild the images docker-compose build --no-cache Spin up the docker DB, and ONLY this one. docker-compose up db Get the ID or name of the docker DB docker container list Restore the DB data zcat ../iris_db_backup.gz | docker exec -i <container> psql -U postgres -d iris_db Spin up the rest of the dockers docker-compose up Your data should back.","title":"Rolling back"},{"location":"operations/upgrades/#version-specific-upgrades","text":"","title":"Version specific upgrades"},{"location":"operations/upgrades/#v140","text":"This version brings breaking changes in the DB docker by adding a named volume instead of the default one. This implies that previous existing database is ignored as the new docker won't know which volume was previously used. To prevent this, please strictly follow the guide below . This will copy the data of the existing volume, to the new named one. Spot the IRIS DB container with docker container list . It should look like iris-web-db-x Fetch the current db volume ID ( name field with the command below) docker inspect <iris_db> | grep -A5 \"Mounts\" # Example of output \"Mounts\" : [ { \"Type\" : \"volume\" , \"Name\" : \"a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9\" , \"Source\" : \"/var/lib/docker/volumes/a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9/_data\" , \"Destination\" : \"/var/lib/postgresql/data\" , 3. Stop all the IRIS dockers : docker-compose stop 4. Create a new empty volume : docker volume create --name iris-web_db_data 5. Run a volume copy via a dummy image : docker run --rm -it -v <previous_db_volume_id>:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" # With the example of 2., this gives docker run --rm -it -v a90b9998a3233a68438c8e099bd0ba98d9f62c9734e40297b8067f9fdb921eb9:/from:ro -v iris-web_db_data:/to alpine ash -c \"cd /from ; cp -av . /to\" 6. Pull the last changes from the repository, checkout to v1.4.0 , build and run. git pull origin git checkout v1.4.0 docker-compose build docker-compose up 7. The data should be successfully transferred.","title":"v1.4.0"},{"location":"python_client/dfir_iris_client/","text":"Table of Contents","title":"Table of Contents"},{"location":"python_client/dfir_iris_client/#table-of-contents","text":"","title":"Table of Contents"},{"location":"python_client/modules/","text":"Python client dfir_iris_client offers a Python interface to communicate with IRIS. It relies exclusively on the API, which means output of the methods are the same as specified in the API reference. The source code of the project is available here . Versions The Python client version follows the API versions (until the patch level). Meaning for API v1.0.1, one need to install dfir_iris_client-1.0.1 . Examples Examples of usage are available here . References Doc v1.0.1","title":"Python client"},{"location":"python_client/modules/#python-client","text":"dfir_iris_client offers a Python interface to communicate with IRIS. It relies exclusively on the API, which means output of the methods are the same as specified in the API reference. The source code of the project is available here .","title":"Python client"},{"location":"python_client/modules/#versions","text":"The Python client version follows the API versions (until the patch level). Meaning for API v1.0.1, one need to install dfir_iris_client-1.0.1 .","title":"Versions"},{"location":"python_client/modules/#examples","text":"Examples of usage are available here .","title":"Examples"},{"location":"python_client/modules/#references","text":"Doc v1.0.1","title":"References"},{"location":"python_client/references/admin/","text":"AdminHelper Bases: object Handles administrative tasks Source code in dfir_iris_client/admin.pyclass AdminHelper ( object ): \"\"\" Handles administrative tasks \"\"\" def __init__ ( self , session ): \"\"\" Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object \"\"\" self . _s = session if not self . is_user_admin (): raise Exception ( ClientApiError ( 'Only administrators can use AdminHelper' )) def is_user_admin ( self ) -> bool : \"\"\" Returns True if the calling user is administrator :return: Bool - true if the calling is administrator \"\"\" req = self . _s . pi_get ( 'user/is-admin' ) return req . is_success () def get_user ( self , login : str ) -> ApiResponse : \"\"\" Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse \"\"\" user_lookup_r = self . _s . pi_get ( f 'manage/users/lookup/login/ { login } ' , cid = 1 ) if user_lookup_r . is_error (): return ClientApiError ( msg = user_lookup_r . get_msg ()) user_id = user_lookup_r . get_data () . get ( 'user_id' ) return self . _s . pi_get ( f 'manage/users/ { user_id } ' ) def add_user ( self , login : str , name : str , password : str , email : str , is_admin : bool = False ) -> ApiResponse : \"\"\" Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" body = { \"user_login\" : login , \"user_name\" : name , \"user_password\" : password , \"user_email\" : email , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/add' , data = body ) def deactivate_user ( self , user_id : int = None ) -> ApiResponse : \"\"\" Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/users/deactivate/ { user_id } ' ) def update_user ( self , login : str = None , name : str = None , password : str = None , email : str = None , is_admin : bool = None ) -> ApiResponse : \"\"\" Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () body = { \"user_login\" : login , \"user_name\" : name if name else user . get ( 'user_name' ), \"user_email\" : email if email else user . get ( 'user_email' ), \"user_password\" : password if password else \"\" , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/update/ { user . get ( \"user_id\" ) } ' , data = body ) def delete_user ( self , login : str ) -> ApiResponse : \"\"\" Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () return self . delete_user_by_id ( user_id = user . get ( 'user_id' )) def delete_user_by_id ( self , user_id : int ) -> ApiResponse : \"\"\" Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/delete/ { user_id } ' ) def add_ioc_type ( self , name : str , description : str , taxonomy : str = None ) -> ApiResponse : \"\"\" Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" body = { \"type_name\" : name , \"type_description\" : description , \"type_taxonomy\" : taxonomy if taxonomy else \"\" , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/add' , data = body ) def delete_ioc_type ( self , ioc_type_id : int ) -> ApiResponse : \"\"\" Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/ioc-types/delete/ { ioc_type_id } ' ) def update_ioc_type ( self , ioc_type_id : int , name : str = None , description : str = None , taxonomy : str = None ) -> ApiResponse : \"\"\" Updates an IOC type. `ioc_type_id` needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" ioc_type = IocTypeHelper ( session = self . _s ) ioct_req = ioc_type . get_ioc_type ( ioc_type_id = ioc_type_id ) if ioct_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch ioc type # { ioc_type_id } for update' , error = ioct_req . get_msg ()) ioc = ioct_req . get_data () body = { \"type_name\" : name if name else ioc . get ( 'type_name' ), \"type_description\" : description if description else ioc . get ( 'type_description' ), \"type_taxonomy\" : taxonomy if taxonomy else ioc . get ( 'type_taxonomy' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/update/ { ioc_type_id } ' , data = body ) def add_asset_type ( self , name : str , description : str ) -> ApiResponse : \"\"\" Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse \"\"\" body = { \"asset_name\" : name , \"asset_description\" : description , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/add' , data = body ) def delete_asset_type ( self , asset_type_id : int ) -> ApiResponse : \"\"\" Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/asset-type/delete/ { asset_type_id } ' ) def update_asset_type ( self , asset_type_id : int , name : str = None , description : str = None ) -> ApiResponse : \"\"\" Updates an Asset type. `asset_type_id` needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse \"\"\" asset_type = AssetTypeHelper ( session = self . _s ) sat_req = asset_type . get_asset_type ( asset_type_id = asset_type_id ) if sat_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch asset type # { sat_req } for update' , error = sat_req . get_msg ()) ioc = sat_req . get_data () body = { \"asset_name\" : name if name else ioc . get ( 'asset_name' ), \"asset_description\" : description if description else ioc . get ( 'asset_description' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/update/ { asset_type_id } ' , data = body ) def add_customer ( self , customer_name : str ): \"\"\" Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( '/manage/customers/add' , data = body ) return resp def update_customer ( self , customer_id : int , customer_name : str ): \"\"\" Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( f '/manage/customers/update/ { customer_id } ' , data = body ) return resp def delete_customer ( self , customer : Union [ str , int ]) -> ApiResponse : \"\"\" Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object \"\"\" if isinstance ( customer , str ): c = Customer ( session = self . _s ) c_id = c . lookup_customer ( customer_name = customer ) if not c_id : return ClientApiError ( f 'Customer { customer } not found' ) data = get_data_from_resp ( c_id ) c_id = parse_api_data ( data , 'customer_id' ) else : c_id = customer resp = self . _s . pi_get ( f 'manage/customers/delete/ { c_id } ' ) return resp __init__ ( session ) Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object Source code in dfir_iris_client/admin.py 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , session ): \"\"\" Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object \"\"\" self . _s = session if not self . is_user_admin (): raise Exception ( ClientApiError ( 'Only administrators can use AdminHelper' )) add_asset_type ( name , description ) Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse Source code in dfir_iris_client/admin.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 def add_asset_type ( self , name : str , description : str ) -> ApiResponse : \"\"\" Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse \"\"\" body = { \"asset_name\" : name , \"asset_description\" : description , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/add' , data = body ) add_customer ( customer_name ) Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object Source code in dfir_iris_client/admin.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 def add_customer ( self , customer_name : str ): \"\"\" Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( '/manage/customers/add' , data = body ) return resp add_ioc_type ( name , description , taxonomy = None ) Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse Source code in dfir_iris_client/admin.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def add_ioc_type ( self , name : str , description : str , taxonomy : str = None ) -> ApiResponse : \"\"\" Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" body = { \"type_name\" : name , \"type_description\" : description , \"type_taxonomy\" : taxonomy if taxonomy else \"\" , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/add' , data = body ) add_user ( login , name , password , email , is_admin = False ) Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse Source code in dfir_iris_client/admin.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def add_user ( self , login : str , name : str , password : str , email : str , is_admin : bool = False ) -> ApiResponse : \"\"\" Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" body = { \"user_login\" : login , \"user_name\" : name , \"user_password\" : password , \"user_email\" : email , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/add' , data = body ) deactivate_user ( user_id = None ) Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object Source code in dfir_iris_client/admin.py 97 98 99 100 101 102 103 104 105 def deactivate_user ( self , user_id : int = None ) -> ApiResponse : \"\"\" Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/users/deactivate/ { user_id } ' ) delete_asset_type ( asset_type_id ) Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 260 261 262 263 264 265 266 267 268 269 def delete_asset_type ( self , asset_type_id : int ) -> ApiResponse : \"\"\" Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/asset-type/delete/ { asset_type_id } ' ) delete_customer ( customer ) Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object Source code in dfir_iris_client/admin.py 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def delete_customer ( self , customer : Union [ str , int ]) -> ApiResponse : \"\"\" Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object \"\"\" if isinstance ( customer , str ): c = Customer ( session = self . _s ) c_id = c . lookup_customer ( customer_name = customer ) if not c_id : return ClientApiError ( f 'Customer { customer } not found' ) data = get_data_from_resp ( c_id ) c_id = parse_api_data ( data , 'customer_id' ) else : c_id = customer resp = self . _s . pi_get ( f 'manage/customers/delete/ { c_id } ' ) return resp delete_ioc_type ( ioc_type_id ) Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 202 203 204 205 206 207 208 209 210 211 def delete_ioc_type ( self , ioc_type_id : int ) -> ApiResponse : \"\"\" Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/ioc-types/delete/ { ioc_type_id } ' ) delete_user ( login ) Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 def delete_user ( self , login : str ) -> ApiResponse : \"\"\" Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () return self . delete_user_by_id ( user_id = user . get ( 'user_id' )) delete_user_by_id ( user_id ) Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 170 171 172 173 174 175 176 177 178 179 180 181 def delete_user_by_id ( self , user_id : int ) -> ApiResponse : \"\"\" Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/delete/ { user_id } ' ) get_user ( login ) Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse Source code in dfir_iris_client/admin.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def get_user ( self , login : str ) -> ApiResponse : \"\"\" Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse \"\"\" user_lookup_r = self . _s . pi_get ( f 'manage/users/lookup/login/ { login } ' , cid = 1 ) if user_lookup_r . is_error (): return ClientApiError ( msg = user_lookup_r . get_msg ()) user_id = user_lookup_r . get_data () . get ( 'user_id' ) return self . _s . pi_get ( f 'manage/users/ { user_id } ' ) is_user_admin () Returns True if the calling user is administrator :return: Bool - true if the calling is administrator Source code in dfir_iris_client/admin.py 42 43 44 45 46 47 48 49 def is_user_admin ( self ) -> bool : \"\"\" Returns True if the calling user is administrator :return: Bool - true if the calling is administrator \"\"\" req = self . _s . pi_get ( 'user/is-admin' ) return req . is_success () update_asset_type ( asset_type_id , name = None , description = None ) Updates an Asset type. asset_type_id needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse Source code in dfir_iris_client/admin.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def update_asset_type ( self , asset_type_id : int , name : str = None , description : str = None ) -> ApiResponse : \"\"\" Updates an Asset type. `asset_type_id` needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse \"\"\" asset_type = AssetTypeHelper ( session = self . _s ) sat_req = asset_type . get_asset_type ( asset_type_id = asset_type_id ) if sat_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch asset type # { sat_req } for update' , error = sat_req . get_msg ()) ioc = sat_req . get_data () body = { \"asset_name\" : name if name else ioc . get ( 'asset_name' ), \"asset_description\" : description if description else ioc . get ( 'asset_description' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/update/ { asset_type_id } ' , data = body ) update_customer ( customer_id , customer_name ) Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object Source code in dfir_iris_client/admin.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def update_customer ( self , customer_id : int , customer_name : str ): \"\"\" Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( f '/manage/customers/update/ { customer_id } ' , data = body ) return resp update_ioc_type ( ioc_type_id , name = None , description = None , taxonomy = None ) Updates an IOC type. ioc_type_id needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse Source code in dfir_iris_client/admin.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def update_ioc_type ( self , ioc_type_id : int , name : str = None , description : str = None , taxonomy : str = None ) -> ApiResponse : \"\"\" Updates an IOC type. `ioc_type_id` needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" ioc_type = IocTypeHelper ( session = self . _s ) ioct_req = ioc_type . get_ioc_type ( ioc_type_id = ioc_type_id ) if ioct_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch ioc type # { ioc_type_id } for update' , error = ioct_req . get_msg ()) ioc = ioct_req . get_data () body = { \"type_name\" : name if name else ioc . get ( 'type_name' ), \"type_description\" : description if description else ioc . get ( 'type_description' ), \"type_taxonomy\" : taxonomy if taxonomy else ioc . get ( 'type_taxonomy' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/update/ { ioc_type_id } ' , data = body ) update_user ( login = None , name = None , password = None , email = None , is_admin = None ) Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse Source code in dfir_iris_client/admin.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def update_user ( self , login : str = None , name : str = None , password : str = None , email : str = None , is_admin : bool = None ) -> ApiResponse : \"\"\" Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () body = { \"user_login\" : login , \"user_name\" : name if name else user . get ( 'user_name' ), \"user_email\" : email if email else user . get ( 'user_email' ), \"user_password\" : password if password else \"\" , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/update/ { user . get ( \"user_id\" ) } ' , data = body )","title":"Admin"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper","text":"Bases: object Handles administrative tasks Source code in dfir_iris_client/admin.pyclass AdminHelper ( object ): \"\"\" Handles administrative tasks \"\"\" def __init__ ( self , session ): \"\"\" Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object \"\"\" self . _s = session if not self . is_user_admin (): raise Exception ( ClientApiError ( 'Only administrators can use AdminHelper' )) def is_user_admin ( self ) -> bool : \"\"\" Returns True if the calling user is administrator :return: Bool - true if the calling is administrator \"\"\" req = self . _s . pi_get ( 'user/is-admin' ) return req . is_success () def get_user ( self , login : str ) -> ApiResponse : \"\"\" Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse \"\"\" user_lookup_r = self . _s . pi_get ( f 'manage/users/lookup/login/ { login } ' , cid = 1 ) if user_lookup_r . is_error (): return ClientApiError ( msg = user_lookup_r . get_msg ()) user_id = user_lookup_r . get_data () . get ( 'user_id' ) return self . _s . pi_get ( f 'manage/users/ { user_id } ' ) def add_user ( self , login : str , name : str , password : str , email : str , is_admin : bool = False ) -> ApiResponse : \"\"\" Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" body = { \"user_login\" : login , \"user_name\" : name , \"user_password\" : password , \"user_email\" : email , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/add' , data = body ) def deactivate_user ( self , user_id : int = None ) -> ApiResponse : \"\"\" Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/users/deactivate/ { user_id } ' ) def update_user ( self , login : str = None , name : str = None , password : str = None , email : str = None , is_admin : bool = None ) -> ApiResponse : \"\"\" Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () body = { \"user_login\" : login , \"user_name\" : name if name else user . get ( 'user_name' ), \"user_email\" : email if email else user . get ( 'user_email' ), \"user_password\" : password if password else \"\" , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/update/ { user . get ( \"user_id\" ) } ' , data = body ) def delete_user ( self , login : str ) -> ApiResponse : \"\"\" Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () return self . delete_user_by_id ( user_id = user . get ( 'user_id' )) def delete_user_by_id ( self , user_id : int ) -> ApiResponse : \"\"\" Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/delete/ { user_id } ' ) def add_ioc_type ( self , name : str , description : str , taxonomy : str = None ) -> ApiResponse : \"\"\" Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" body = { \"type_name\" : name , \"type_description\" : description , \"type_taxonomy\" : taxonomy if taxonomy else \"\" , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/add' , data = body ) def delete_ioc_type ( self , ioc_type_id : int ) -> ApiResponse : \"\"\" Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/ioc-types/delete/ { ioc_type_id } ' ) def update_ioc_type ( self , ioc_type_id : int , name : str = None , description : str = None , taxonomy : str = None ) -> ApiResponse : \"\"\" Updates an IOC type. `ioc_type_id` needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" ioc_type = IocTypeHelper ( session = self . _s ) ioct_req = ioc_type . get_ioc_type ( ioc_type_id = ioc_type_id ) if ioct_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch ioc type # { ioc_type_id } for update' , error = ioct_req . get_msg ()) ioc = ioct_req . get_data () body = { \"type_name\" : name if name else ioc . get ( 'type_name' ), \"type_description\" : description if description else ioc . get ( 'type_description' ), \"type_taxonomy\" : taxonomy if taxonomy else ioc . get ( 'type_taxonomy' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/update/ { ioc_type_id } ' , data = body ) def add_asset_type ( self , name : str , description : str ) -> ApiResponse : \"\"\" Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse \"\"\" body = { \"asset_name\" : name , \"asset_description\" : description , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/add' , data = body ) def delete_asset_type ( self , asset_type_id : int ) -> ApiResponse : \"\"\" Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/asset-type/delete/ { asset_type_id } ' ) def update_asset_type ( self , asset_type_id : int , name : str = None , description : str = None ) -> ApiResponse : \"\"\" Updates an Asset type. `asset_type_id` needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse \"\"\" asset_type = AssetTypeHelper ( session = self . _s ) sat_req = asset_type . get_asset_type ( asset_type_id = asset_type_id ) if sat_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch asset type # { sat_req } for update' , error = sat_req . get_msg ()) ioc = sat_req . get_data () body = { \"asset_name\" : name if name else ioc . get ( 'asset_name' ), \"asset_description\" : description if description else ioc . get ( 'asset_description' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/update/ { asset_type_id } ' , data = body ) def add_customer ( self , customer_name : str ): \"\"\" Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( '/manage/customers/add' , data = body ) return resp def update_customer ( self , customer_id : int , customer_name : str ): \"\"\" Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( f '/manage/customers/update/ { customer_id } ' , data = body ) return resp def delete_customer ( self , customer : Union [ str , int ]) -> ApiResponse : \"\"\" Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object \"\"\" if isinstance ( customer , str ): c = Customer ( session = self . _s ) c_id = c . lookup_customer ( customer_name = customer ) if not c_id : return ClientApiError ( f 'Customer { customer } not found' ) data = get_data_from_resp ( c_id ) c_id = parse_api_data ( data , 'customer_id' ) else : c_id = customer resp = self . _s . pi_get ( f 'manage/customers/delete/ { c_id } ' ) return resp","title":"AdminHelper"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.__init__","text":"Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object Source code in dfir_iris_client/admin.py 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , session ): \"\"\" Overlay offering administrative tasks. Initialisation of the class checks if the calling user has admin rights. If the user doesn't, a ClientApiError exception is raised. :raises: ClientApiError if unprivileged user :param session: ClientSession object \"\"\" self . _s = session if not self . is_user_admin (): raise Exception ( ClientApiError ( 'Only administrators can use AdminHelper' ))","title":"__init__()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_asset_type","text":"Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse Source code in dfir_iris_client/admin.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 def add_asset_type ( self , name : str , description : str ) -> ApiResponse : \"\"\" Add a new Asset Type. .. warning:: Requires admin rights :param name: Name of the Asset type :param description: Description of the Asset type :return: ApiResponse \"\"\" body = { \"asset_name\" : name , \"asset_description\" : description , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/add' , data = body )","title":"add_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_customer","text":"Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object Source code in dfir_iris_client/admin.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 def add_customer ( self , customer_name : str ): \"\"\" Creates a new customer. A new customer can be added if: - customer_name is unique .. warning:: Requires admin rights :param: str: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( '/manage/customers/add' , data = body ) return resp","title":"add_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_ioc_type","text":"Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse Source code in dfir_iris_client/admin.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def add_ioc_type ( self , name : str , description : str , taxonomy : str = None ) -> ApiResponse : \"\"\" Add a new IOC Type. .. warning:: Requires admin rights :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" body = { \"type_name\" : name , \"type_description\" : description , \"type_taxonomy\" : taxonomy if taxonomy else \"\" , \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/add' , data = body )","title":"add_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.add_user","text":"Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse Source code in dfir_iris_client/admin.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def add_user ( self , login : str , name : str , password : str , email : str , is_admin : bool = False ) -> ApiResponse : \"\"\" Adds a new user. A new user can be successfully added if - login is unique - email is unique - password meets the requirements of IRIS .. warning:: Requires admin rights :param login: Username (login name) of the user to add :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" body = { \"user_login\" : login , \"user_name\" : name , \"user_password\" : password , \"user_email\" : email , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/add' , data = body )","title":"add_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.deactivate_user","text":"Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object Source code in dfir_iris_client/admin.py 97 98 99 100 101 102 103 104 105 def deactivate_user ( self , user_id : int = None ) -> ApiResponse : \"\"\" Deactivate a user from its user ID. Disabled users can't login interactively nor user their API keys. They do not appears in proposed user lists. :param user_id: User ID to deactivate :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/users/deactivate/ { user_id } ' )","title":"deactivate_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_asset_type","text":"Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 260 261 262 263 264 265 266 267 268 269 def delete_asset_type ( self , asset_type_id : int ) -> ApiResponse : \"\"\" Delete an existing asset type by its ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/asset-type/delete/ { asset_type_id } ' )","title":"delete_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_customer","text":"Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object Source code in dfir_iris_client/admin.py 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def delete_customer ( self , customer : Union [ str , int ]) -> ApiResponse : \"\"\" Deletes a customer from its ID or name. .. warning:: Requires admin rights :param customer: Customer name or customer ID :return: ApiResponse object \"\"\" if isinstance ( customer , str ): c = Customer ( session = self . _s ) c_id = c . lookup_customer ( customer_name = customer ) if not c_id : return ClientApiError ( f 'Customer { customer } not found' ) data = get_data_from_resp ( c_id ) c_id = parse_api_data ( data , 'customer_id' ) else : c_id = customer resp = self . _s . pi_get ( f 'manage/customers/delete/ { c_id } ' ) return resp","title":"delete_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_ioc_type","text":"Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 202 203 204 205 206 207 208 209 210 211 def delete_ioc_type ( self , ioc_type_id : int ) -> ApiResponse : \"\"\" Delete an existing IOC Type by its ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/ioc-types/delete/ { ioc_type_id } ' )","title":"delete_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_user","text":"Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 def delete_user ( self , login : str ) -> ApiResponse : \"\"\" Deletes a user based on its login. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param login: Username (login name) of the user to delete :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () return self . delete_user_by_id ( user_id = user . get ( 'user_id' ))","title":"delete_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.delete_user_by_id","text":"Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse Source code in dfir_iris_client/admin.py 170 171 172 173 174 175 176 177 178 179 180 181 def delete_user_by_id ( self , user_id : int ) -> ApiResponse : \"\"\" Delete a user based on its ID. A user can only be deleted if it does not have any activities in IRIS. This is to maintain coherence in the database. .. warning:: Requires admin rights :param user_id: UserID of the user to delete :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/delete/ { user_id } ' )","title":"delete_user_by_id()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.get_user","text":"Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse Source code in dfir_iris_client/admin.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def get_user ( self , login : str ) -> ApiResponse : \"\"\" Returns a user by its login. Login names are unique in Iris. :param login: username to lookup :return: ApiResponse \"\"\" user_lookup_r = self . _s . pi_get ( f 'manage/users/lookup/login/ { login } ' , cid = 1 ) if user_lookup_r . is_error (): return ClientApiError ( msg = user_lookup_r . get_msg ()) user_id = user_lookup_r . get_data () . get ( 'user_id' ) return self . _s . pi_get ( f 'manage/users/ { user_id } ' )","title":"get_user()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.is_user_admin","text":"Returns True if the calling user is administrator :return: Bool - true if the calling is administrator Source code in dfir_iris_client/admin.py 42 43 44 45 46 47 48 49 def is_user_admin ( self ) -> bool : \"\"\" Returns True if the calling user is administrator :return: Bool - true if the calling is administrator \"\"\" req = self . _s . pi_get ( 'user/is-admin' ) return req . is_success ()","title":"is_user_admin()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_asset_type","text":"Updates an Asset type. asset_type_id needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse Source code in dfir_iris_client/admin.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def update_asset_type ( self , asset_type_id : int , name : str = None , description : str = None ) -> ApiResponse : \"\"\" Updates an Asset type. `asset_type_id` needs to be a valid existing AssetType ID. .. warning:: Requires admin rights :param asset_type_id: Asset type to update :param name: Name of the IOC type :param description: Description of the IOC type :return: ApiResponse \"\"\" asset_type = AssetTypeHelper ( session = self . _s ) sat_req = asset_type . get_asset_type ( asset_type_id = asset_type_id ) if sat_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch asset type # { sat_req } for update' , error = sat_req . get_msg ()) ioc = sat_req . get_data () body = { \"asset_name\" : name if name else ioc . get ( 'asset_name' ), \"asset_description\" : description if description else ioc . get ( 'asset_description' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/asset-type/update/ { asset_type_id } ' , data = body )","title":"update_asset_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_customer","text":"Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object Source code in dfir_iris_client/admin.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def update_customer ( self , customer_id : int , customer_name : str ): \"\"\" Updates an existing customer. A customer can be updated if : - `customer_id` is a know customer ID in IRIS - `customer_name` is unique .. warning:: Requires admin rights :param customer_id: ID of the customer to update :param customer_name: Customer name :return: ApiResponse object \"\"\" body = { \"customer_name\" : customer_name . lower () } resp = self . _s . pi_post ( f '/manage/customers/update/ { customer_id } ' , data = body ) return resp","title":"update_customer()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_ioc_type","text":"Updates an IOC type. ioc_type_id needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse Source code in dfir_iris_client/admin.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def update_ioc_type ( self , ioc_type_id : int , name : str = None , description : str = None , taxonomy : str = None ) -> ApiResponse : \"\"\" Updates an IOC type. `ioc_type_id` needs to be a valid existing IocType ID. .. warning:: Requires admin rights :param ioc_type_id: IOC type to update :param name: Name of the IOC type :param description: Description of the IOC type :param taxonomy: Taxonomy of the IOC Type :return: ApiResponse \"\"\" ioc_type = IocTypeHelper ( session = self . _s ) ioct_req = ioc_type . get_ioc_type ( ioc_type_id = ioc_type_id ) if ioct_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch ioc type # { ioc_type_id } for update' , error = ioct_req . get_msg ()) ioc = ioct_req . get_data () body = { \"type_name\" : name if name else ioc . get ( 'type_name' ), \"type_description\" : description if description else ioc . get ( 'type_description' ), \"type_taxonomy\" : taxonomy if taxonomy else ioc . get ( 'type_taxonomy' ), \"cid\" : 1 } return self . _s . pi_post ( f 'manage/ioc-types/update/ { ioc_type_id } ' , data = body )","title":"update_ioc_type()"},{"location":"python_client/references/admin/#dfir_iris_client.admin.AdminHelper.update_user","text":"Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse Source code in dfir_iris_client/admin.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def update_user ( self , login : str = None , name : str = None , password : str = None , email : str = None , is_admin : bool = None ) -> ApiResponse : \"\"\" Updates a user. The user can be updated if : - login is unique - email is unique - password meets the requirements of IRIS Password can be left empty to update other attributes. .. warning:: Requires admin rights :param login: Username (login name) of the user to update :param name: Full name of the user :param password: Password of the user :param email: Email of the user :param is_admin: Set to true if user is admin :return: ApiResponse \"\"\" user_req = self . get_user ( login = login ) if user_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch user { login } for update' , error = user_req . get_msg ()) user = user_req . get_data () body = { \"user_login\" : login , \"user_name\" : name if name else user . get ( 'user_name' ), \"user_email\" : email if email else user . get ( 'user_email' ), \"user_password\" : password if password else \"\" , \"cid\" : 1 } if is_admin : body [ 'user_isadmin' ] = \"y\" return self . _s . pi_post ( f 'manage/users/update/ { user . get ( \"user_id\" ) } ' , data = body )","title":"update_user()"},{"location":"python_client/references/case/","text":"Case Bases: object Handles the case methods Source code in dfir_iris_client/case.pyclass Case ( object ): \"\"\" Handles the case methods \"\"\" def __init__ ( self , session , case_id : int = None ): self . _s = session self . _cid = case_id def list_cases ( self ) -> ApiResponse : \"\"\" Returns a list of all the cases :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid = 1 ) return self . _s . pi_get ( 'manage/cases/list' , cid = cid ) def get_case ( self , cid : int ) -> ApiResponse : \"\"\" Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/cases/ { cid } ' ) def add_case ( self , case_name : str , case_description : str , case_customer : Union [ str , int ], soc_id : str , custom_attributes : dict = None , create_customer = False ) -> ApiResponse : \"\"\" Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object \"\"\" if isinstance ( case_customer , str ): # Get the customer ID customer = Customer ( session = self . _s ) c_id = customer . lookup_customer ( customer_name = case_customer ) if c_id . is_error (): if create_customer : adm = AdminHelper ( self . _s ) c_resp = adm . add_customer ( customer_name = case_customer ) if c_resp . is_error (): return c_resp c_id = c_resp else : return ClientApiError ( f 'Customer { case_customer } wasn \\' t found. Check syntax or set ' f 'create_customer flag to create it' ) if c_id . is_error (): return c_id case_customer = c_id . get_data () . get ( 'customer_id' ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"case_name\" : case_name , \"case_customer\" : case_customer , \"case_soc_id\" : soc_id , \"case_description\" : case_description , \"custom_attributes\" : custom_attributes } resp = self . _s . pi_post ( 'manage/cases/add' , data = body ) return resp def delete_case ( self , cid : int ) -> ApiResponse : \"\"\" Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse \"\"\" resp = self . _s . pi_get ( f 'manage/cases/delete/ { cid } ' ) return resp def case_id_exists ( self , cid : int ) -> bool : \"\"\" Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false \"\"\" resp = self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) return resp . is_success () def set_cid ( self , cid : int ) -> bool : \"\"\" Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true \"\"\" self . _cid = cid return True def _assert_cid ( self , cid : int ) -> int : \"\"\" Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int \"\"\" if not cid and not self . _cid : raise Exception ( \"No case ID provided. Either use cid argument or set_cid method\" ) if not cid : cid = self . _cid if not isinstance ( cid , int ): raise Exception ( f 'Invalid CID type. Got { type ( cid ) } but was expecting int' ) return cid def get_summary ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) def set_summary ( self , summary_content : str = None , cid : int = None ) -> ApiResponse : \"\"\" Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"case_description\" : summary_content , \"cid\" : cid } return self . _s . pi_post ( 'case/summary/update' , data = body ) def list_notes_groups ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/notes/groups/list' , cid = cid ) def get_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/ { group_id } ' , cid = cid ) def add_notes_group ( self , group_title : str = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/add' , data = body ) def update_notes_group ( self , group_id : int , group_title : str , cid : int = None ) -> ApiResponse : \"\"\" Updates a notes group in the target cid case. `group_id` need to be an existing group in the target case. `group_title` can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"group_id\" : group_id , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/update' , data = body ) def delete_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/delete/ { group_id } ' , cid = cid ) def get_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/ { note_id } ' , cid = cid ) def update_note ( self , note_id : int , note_title : str = None , note_content : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note_req = self . get_note ( note_id = note_id , cid = cid ) if note_req . is_error (): return ClientApiError ( f 'Unable to fetch note # { note_id } for update' , msg = note_req . get_msg ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note = note_req . get_data () body = { \"note_title\" : note_title if note_title else note . get ( 'note_title' ), \"note_content\" : note_content if note_content else note . get ( 'note_content' ), \"custom_attributes\" : custom_attributes , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/update/ { note_id } ' , data = body ) def delete_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/delete/ { note_id } ' , cid = cid ) def add_note ( self , note_title : str , note_content : str , group_id : int , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"note_title\" : note_title , \"note_content\" : note_content , \"group_id\" : group_id , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/add' , data = body ) def search_notes ( self , search_term : str , cid : int = None ) -> ApiResponse : \"\"\" Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"search_term\" : search_term , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/search' , data = body ) def list_assets ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/assets/list' , cid = cid ) def add_asset ( self , name : str , asset_type : Union [ str , int ], analysis_status : Union [ str , int ], compromised : bool = None , tags : List [ str ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } was not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } was not found\" ) else : analysis_status = analysis_status_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name , \"asset_type_id\" : asset_type , \"analysis_status_id\" : analysis_status , \"cid\" : cid } if description is not None : body [ 'asset_description' ] = description if domain is not None : body [ 'asset_domain' ] = domain if ip is not None : body [ 'asset_ip' ] = ip if additional_info is not None : body [ 'asset_info' ] = additional_info if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] if compromised is not None : body [ 'asset_compromised' ] = compromised if tags is not None : body [ 'asset_tags' ] = ',' . join ( tags ) if custom_attributes is not None : body [ 'custom_attributes' ] = custom_attributes return self . _s . pi_post ( f 'case/assets/add' , data = body ) def get_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/ { asset_id } ' , cid = cid ) def asset_exists ( self , asset_id : int , cid : int = None ) -> bool : \"\"\" Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false \"\"\" cid = self . _assert_cid ( cid ) resp = self . get_asset ( asset_id = asset_id , cid = cid ) return resp . is_success () def update_asset ( self , asset_id : int , name : str = None , asset_type : Union [ str , int ] = None , tags : List [ str ] = None , analysis_status : Union [ str , int ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , compromised : bool = None , custom_attributes : dict = None , cid : int = None , no_sync = False ) -> ApiResponse : \"\"\" Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) asset = None if not no_sync : asset_req = self . get_asset ( asset_id = asset_id , cid = cid ) if asset_req . is_error (): return asset_req asset = asset_req . get_data () if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } not found\" ) else : analysis_status = analysis_status_r if ioc_links : for link in ioc_links : ioc = self . get_ioc ( ioc_id = int ( link )) if ioc . is_error (): return ClientApiError ( msg = f \"IOC { link } was not found\" , error = ioc . get_data ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name if name is not None or no_sync else asset . get ( 'asset_name' ), \"asset_type_id\" : asset_type if asset_type is not None or no_sync else int ( asset . get ( 'asset_type_id' )), \"analysis_status_id\" : analysis_status if analysis_status is not None or no_sync else int ( asset . get ( 'analysis_status_id' )), \"asset_description\" : description if description is not None or no_sync else asset . get ( 'analysis_status' ), \"asset_domain\" : domain if domain is not None or no_sync else asset . get ( 'asset_domain' ), \"asset_ip\" : ip if ip is not None or no_sync else asset . get ( 'asset_ip' ), \"asset_info\" : additional_info if additional_info is not None or no_sync else asset . get ( 'asset_info' ), \"asset_compromised\" : compromised if compromised is not None or no_sync else asset . get ( 'asset_compromise' ), \"asset_tags\" : ',' . join ( tags ) if tags is not None or no_sync else asset . get ( 'asset_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else asset . get ( 'custom_attributes' ), \"cid\" : cid } if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] return self . _s . pi_post ( f 'case/assets/update/ { asset_id } ' , data = body ) def delete_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/delete/ { asset_id } ' , cid = cid ) def list_iocs ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/ioc/list' , cid = cid ) def add_ioc ( self , value : str , ioc_type : Union [ str , int ], description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value , \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else 2 , \"ioc_type_id\" : ioc_type , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } if description : body [ 'ioc_description' ] = description if ioc_tags : body [ 'ioc_tags' ] = \",\" . join ( ioc_tags ) return self . _s . pi_post ( f 'case/ioc/add' , data = body ) def get_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/ { ioc_id } ' , cid = cid ) def update_ioc ( self , ioc_id : int , value : str = None , ioc_type : Union [ str , int ] = None , description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) ioc_req = self . get_ioc ( ioc_id , cid = cid ) if ioc_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch IOC # { ioc_id } for update' , error = ioc_req . get_msg ()) ioc = ioc_req . get_data () if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value if value else ioc . get ( 'ioc_value' ), \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else int ( ioc . get ( 'ioc_tlp_id' )), \"ioc_type_id\" : ioc_type if ioc_type else int ( ioc . get ( 'ioc_type_id' )), \"ioc_description\" : description if description else ioc . get ( 'ioc_description' ), \"ioc_tags\" : \",\" . join ( ioc_tags ) if ioc_tags else ioc . get ( 'ioc_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else ioc . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/ioc/update/ { ioc_id } ' , data = body ) def delete_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/delete/ { ioc_id } ' , cid = cid ) def get_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/ { event_id } ' , cid = cid ) def list_events ( self , filter_by_asset : int = 0 , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/list/filter/ { filter_by_asset } ' , cid = cid ) def add_event ( self , title : str , date_time : datetime , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : str = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title , \"event_in_graph\" : display_in_graph if display_in_graph is not None else True , \"event_in_summary\" : display_in_summary if display_in_summary is not None else False , \"event_content\" : content if content else \"\" , \"event_raw\" : raw_content if raw_content else \"\" , \"event_source\" : source if source else \"\" , \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else \"1\" , \"event_color\" : color if color else \"\" , \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ), \"event_tags\" : ',' . join ( tags ) if tags else '' , \"event_tz\" : timezone_string if timezone_string else \"+00:00\" , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/add' , data = body ) def update_event ( self , event_id : int , title : str = None , date_time : datetime = None , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : dict = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) event_req = self . get_event ( event_id , cid = cid ) if event_req . is_error (): return ClientApiError ( msg = event_req . get_msg ()) event = event_req . get_data () if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if date_time and not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title if title else event . get ( 'event_title' ), \"event_in_graph\" : display_in_graph if display_in_graph is not None else event . get ( 'event_in_graph' ), \"event_in_summary\" : display_in_summary if display_in_summary is not None else event . get ( 'event_in_summary' ), \"event_content\" : content if content else event . get ( 'event_content' ), \"event_raw\" : raw_content if raw_content else event . get ( 'event_raw' ), \"event_source\" : source if source else event . get ( 'event_source' ), \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else event . get ( 'event_category_id' ), \"event_color\" : color if color else event . get ( 'event_color' ), \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ) if date_time else event . get ( 'event_date' ), \"event_tags\" : ',' . join ( tags ) if tags else event . get ( 'event_tags' ), \"event_tz\" : timezone_string if timezone_string else event . get ( 'event_tz' ), \"custom_attributes\" : custom_attributes if custom_attributes else event . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/update/ { event_id } ' , data = body ) def delete_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/delete/ { event_id } ' , cid = cid ) def add_task_log ( self , message : str , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid ) data = { \"log_content\" : message , \"cid\" : cid } return self . _s . pi_post ( f 'case/tasklog/add' , data = data ) def list_tasks ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/list' , cid = cid ) def get_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/ { task_id } ' , cid = cid ) def add_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/add' , data = body ) def update_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) task_req = self . get_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), \"custom_attributes\" : custom_attributes if custom_attributes else task . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/update/ { task_id } ' , data = body ) def delete_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/delete/ { task_id } ' , cid = cid ) def list_evidences ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of evidences. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/list' , cid = cid ) def get_evidence ( self , evidence_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/ { evidence_id } ' , cid = cid ) def add_evidence ( self , filename : str , file_size : int , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename , \"file_size\" : file_size , \"file_description\" : description , \"file_hash\" : file_hash , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/add' , data = body ) def update_evidence ( self , evidence_id : int , filename : str = None , file_size : int = None , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) evidence_req = self . get_evidence ( evidence_id = evidence_id , cid = cid ) if evidence_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch evidence # { evidence_id } for update' , error = evidence_req . get_msg ()) evidence = evidence_req . get_data () if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename if filename else evidence . get ( 'filename' ), \"file_size\" : file_size if file_size else evidence . get ( 'file_size' ), \"file_description\" : description if description else evidence . get ( 'file_description' ), \"file_hash\" : file_hash if file_hash else evidence . get ( 'file_hash' ), \"custom_attributes\" : custom_attributes if custom_attributes else evidence . get ( \"custom_attributes\" ), \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/update/ { evidence_id } ' , data = body ) def delete_evidence ( self , evidence_id : int , cid : int = None ): \"\"\" Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/delete/ { evidence_id } ' , cid = cid ) def list_global_tasks ( self ) -> ApiResponse : \"\"\" Return a list of global tasks. :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/list' , cid = 1 ) def get_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/ { task_id } ' , cid = 1 ) def add_global_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object \"\"\" if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"cid\" : 1 } return self . _s . pi_post ( f 'global/tasks/add' , data = body ) def update_global_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object \"\"\" task_req = self . get_global_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), } return self . _s . pi_post ( f 'global/tasks/update/ { task_id } ' , data = body ) def delete_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/delete/ { task_id } ' , cid = 1 ) _assert_cid ( cid ) Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int Source code in dfir_iris_client/case.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def _assert_cid ( self , cid : int ) -> int : \"\"\" Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int \"\"\" if not cid and not self . _cid : raise Exception ( \"No case ID provided. Either use cid argument or set_cid method\" ) if not cid : cid = self . _cid if not isinstance ( cid , int ): raise Exception ( f 'Invalid CID type. Got { type ( cid ) } but was expecting int' ) return cid add_asset ( name , asset_type , analysis_status , compromised = None , tags = None , description = None , domain = None , ip = None , additional_info = None , ioc_links = None , custom_attributes = None , cid = None ) Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 def add_asset ( self , name : str , asset_type : Union [ str , int ], analysis_status : Union [ str , int ], compromised : bool = None , tags : List [ str ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } was not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } was not found\" ) else : analysis_status = analysis_status_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name , \"asset_type_id\" : asset_type , \"analysis_status_id\" : analysis_status , \"cid\" : cid } if description is not None : body [ 'asset_description' ] = description if domain is not None : body [ 'asset_domain' ] = domain if ip is not None : body [ 'asset_ip' ] = ip if additional_info is not None : body [ 'asset_info' ] = additional_info if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] if compromised is not None : body [ 'asset_compromised' ] = compromised if tags is not None : body [ 'asset_tags' ] = ',' . join ( tags ) if custom_attributes is not None : body [ 'custom_attributes' ] = custom_attributes return self . _s . pi_post ( f 'case/assets/add' , data = body ) add_case ( case_name , case_description , case_customer , soc_id , custom_attributes = None , create_customer = False ) Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object Source code in dfir_iris_client/case.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def add_case ( self , case_name : str , case_description : str , case_customer : Union [ str , int ], soc_id : str , custom_attributes : dict = None , create_customer = False ) -> ApiResponse : \"\"\" Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object \"\"\" if isinstance ( case_customer , str ): # Get the customer ID customer = Customer ( session = self . _s ) c_id = customer . lookup_customer ( customer_name = case_customer ) if c_id . is_error (): if create_customer : adm = AdminHelper ( self . _s ) c_resp = adm . add_customer ( customer_name = case_customer ) if c_resp . is_error (): return c_resp c_id = c_resp else : return ClientApiError ( f 'Customer { case_customer } wasn \\' t found. Check syntax or set ' f 'create_customer flag to create it' ) if c_id . is_error (): return c_id case_customer = c_id . get_data () . get ( 'customer_id' ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"case_name\" : case_name , \"case_customer\" : case_customer , \"case_soc_id\" : soc_id , \"case_description\" : case_description , \"custom_attributes\" : custom_attributes } resp = self . _s . pi_post ( 'manage/cases/add' , data = body ) return resp add_event ( title , date_time , content = None , raw_content = None , source = None , linked_assets = None , category = None , tags = None , color = None , display_in_graph = None , display_in_summary = None , custom_attributes = None , cid = None , timezone_string = None ) Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 def add_event ( self , title : str , date_time : datetime , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : str = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title , \"event_in_graph\" : display_in_graph if display_in_graph is not None else True , \"event_in_summary\" : display_in_summary if display_in_summary is not None else False , \"event_content\" : content if content else \"\" , \"event_raw\" : raw_content if raw_content else \"\" , \"event_source\" : source if source else \"\" , \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else \"1\" , \"event_color\" : color if color else \"\" , \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ), \"event_tags\" : ',' . join ( tags ) if tags else '' , \"event_tz\" : timezone_string if timezone_string else \"+00:00\" , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/add' , data = body ) add_evidence ( filename , file_size , description = None , file_hash = None , custom_attributes = None , cid = None ) Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 def add_evidence ( self , filename : str , file_size : int , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename , \"file_size\" : file_size , \"file_description\" : description , \"file_hash\" : file_hash , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/add' , data = body ) add_global_task ( title , status , assignee , description = None , tags = None ) Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object Source code in dfir_iris_client/case.py 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 def add_global_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object \"\"\" if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"cid\" : 1 } return self . _s . pi_post ( f 'global/tasks/add' , data = body ) add_ioc ( value , ioc_type , description = None , ioc_tlp = None , ioc_tags = None , custom_attributes = None , cid = None ) Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse Source code in dfir_iris_client/case.py 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 def add_ioc ( self , value : str , ioc_type : Union [ str , int ], description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value , \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else 2 , \"ioc_type_id\" : ioc_type , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } if description : body [ 'ioc_description' ] = description if ioc_tags : body [ 'ioc_tags' ] = \",\" . join ( ioc_tags ) return self . _s . pi_post ( f 'case/ioc/add' , data = body ) add_note ( note_title , note_content , group_id , custom_attributes = None , cid = None ) Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object Source code in dfir_iris_client/case.py 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 def add_note ( self , note_title : str , note_content : str , group_id : int , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"note_title\" : note_title , \"note_content\" : note_content , \"group_id\" : group_id , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/add' , data = body ) add_notes_group ( group_title = None , cid = None ) Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object Source code in dfir_iris_client/case.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def add_notes_group ( self , group_title : str = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/add' , data = body ) add_task ( title , status , assignee , description = None , tags = None , custom_attributes = None , cid = None ) Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object Source code in dfir_iris_client/case.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 def add_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/add' , data = body ) add_task_log ( message , cid = None ) Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse Source code in dfir_iris_client/case.py 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 def add_task_log ( self , message : str , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid ) data = { \"log_content\" : message , \"cid\" : cid } return self . _s . pi_post ( f 'case/tasklog/add' , data = data ) asset_exists ( asset_id , cid = None ) Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false Source code in dfir_iris_client/case.py 494 495 496 497 498 499 500 501 502 503 504 505 506 def asset_exists ( self , asset_id : int , cid : int = None ) -> bool : \"\"\" Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false \"\"\" cid = self . _assert_cid ( cid ) resp = self . get_asset ( asset_id = asset_id , cid = cid ) return resp . is_success () case_id_exists ( cid ) Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false Source code in dfir_iris_client/case.py 133 134 135 136 137 138 139 140 141 142 143 144 def case_id_exists ( self , cid : int ) -> bool : \"\"\" Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false \"\"\" resp = self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) return resp . is_success () delete_asset ( asset_id , cid = None ) Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 596 597 598 599 600 601 602 603 604 605 606 def delete_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/delete/ { asset_id } ' , cid = cid ) delete_case ( cid ) Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse Source code in dfir_iris_client/case.py 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def delete_case ( self , cid : int ) -> ApiResponse : \"\"\" Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse \"\"\" resp = self . _s . pi_get ( f 'manage/cases/delete/ { cid } ' ) return resp delete_event ( event_id , cid = None ) Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 949 950 951 952 953 954 955 956 957 958 959 def delete_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/delete/ { event_id } ' , cid = cid ) delete_evidence ( evidence_id , cid = None ) Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 def delete_evidence ( self , evidence_id : int , cid : int = None ): \"\"\" Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/delete/ { evidence_id } ' , cid = cid ) delete_global_task ( task_id ) Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object Source code in dfir_iris_client/case.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 def delete_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/delete/ { task_id } ' , cid = 1 ) delete_ioc ( ioc_id , cid = None ) Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 763 764 765 766 767 768 769 770 771 772 773 def delete_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/delete/ { ioc_id } ' , cid = cid ) delete_note ( note_id , cid = None ) Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object Source code in dfir_iris_client/case.py 329 330 331 332 333 334 335 336 337 338 339 def delete_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/delete/ { note_id } ' , cid = cid ) delete_notes_group ( group_id , cid = None ) Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object Source code in dfir_iris_client/case.py 265 266 267 268 269 270 271 272 273 274 275 def delete_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/delete/ { group_id } ' , cid = cid ) delete_task ( task_id , cid = None ) Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 def delete_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/delete/ { task_id } ' , cid = cid ) get_asset ( asset_id , cid = None ) Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 482 483 484 485 486 487 488 489 490 491 492 def get_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/ { asset_id } ' , cid = cid ) get_case ( cid ) Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object Source code in dfir_iris_client/case.py 49 50 51 52 53 54 55 56 def get_case ( self , cid : int ) -> ApiResponse : \"\"\" Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/cases/ { cid } ' ) get_event ( event_id , cid = None ) Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 775 776 777 778 779 780 781 782 783 784 785 def get_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/ { event_id } ' , cid = cid ) get_evidence ( evidence_id , cid = None ) Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 def get_evidence ( self , evidence_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/ { evidence_id } ' , cid = cid ) get_global_task ( task_id ) Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object Source code in dfir_iris_client/case.py 1257 1258 1259 1260 1261 1262 1263 1264 1265 def get_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/ { task_id } ' , cid = 1 ) get_ioc ( ioc_id , cid = None ) Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 683 684 685 686 687 688 689 690 691 692 693 def get_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/ { ioc_id } ' , cid = cid ) get_note ( note_id , cid = None ) Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object Source code in dfir_iris_client/case.py 277 278 279 280 281 282 283 284 285 286 287 def get_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/ { note_id } ' , cid = cid ) get_notes_group ( group_id , cid = None ) Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object Source code in dfir_iris_client/case.py 218 219 220 221 222 223 224 225 226 227 228 def get_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/ { group_id } ' , cid = cid ) get_summary ( cid = None ) Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 178 179 180 181 182 183 184 185 186 def get_summary ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) get_task ( task_id , cid = None ) Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 988 989 990 991 992 993 994 995 996 997 998 def get_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/ { task_id } ' , cid = cid ) list_assets ( cid = None ) Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 391 392 393 394 395 396 397 398 399 400 def list_assets ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/assets/list' , cid = cid ) list_cases () Returns a list of all the cases :return: ApiResponse Source code in dfir_iris_client/case.py 40 41 42 43 44 45 46 47 def list_cases ( self ) -> ApiResponse : \"\"\" Returns a list of all the cases :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid = 1 ) return self . _s . pi_get ( 'manage/cases/list' , cid = cid ) list_events ( filter_by_asset = 0 , cid = None ) Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 787 788 789 790 791 792 793 794 795 796 797 798 def list_events ( self , filter_by_asset : int = 0 , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/list/filter/ { filter_by_asset } ' , cid = cid ) list_evidences ( cid = None ) Returns a list of evidences. :param cid: Case ID :return: ApiResponse object Source code in dfir_iris_client/case.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 def list_evidences ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of evidences. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/list' , cid = cid ) list_global_tasks () Return a list of global tasks. :return: ApiResponse object Source code in dfir_iris_client/case.py 1249 1250 1251 1252 1253 1254 1255 def list_global_tasks ( self ) -> ApiResponse : \"\"\" Return a list of global tasks. :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/list' , cid = 1 ) list_iocs ( cid = None ) Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse Source code in dfir_iris_client/case.py 608 609 610 611 612 613 614 615 616 617 def list_iocs ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/ioc/list' , cid = cid ) list_notes_groups ( cid = None ) Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 208 209 210 211 212 213 214 215 216 def list_notes_groups ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/notes/groups/list' , cid = cid ) list_tasks ( cid = None ) Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object Source code in dfir_iris_client/case.py 977 978 979 980 981 982 983 984 985 986 def list_tasks ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/list' , cid = cid ) search_notes ( search_term , cid = None ) Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object Source code in dfir_iris_client/case.py 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 def search_notes ( self , search_term : str , cid : int = None ) -> ApiResponse : \"\"\" Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"search_term\" : search_term , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/search' , data = body ) set_cid ( cid ) Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true Source code in dfir_iris_client/case.py 146 147 148 149 150 151 152 153 154 155 156 def set_cid ( self , cid : int ) -> bool : \"\"\" Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true \"\"\" self . _cid = cid return True set_summary ( summary_content = None , cid = None ) Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object Source code in dfir_iris_client/case.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def set_summary ( self , summary_content : str = None , cid : int = None ) -> ApiResponse : \"\"\" Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"case_description\" : summary_content , \"cid\" : cid } return self . _s . pi_post ( 'case/summary/update' , data = body ) update_asset ( asset_id , name = None , asset_type = None , tags = None , analysis_status = None , description = None , domain = None , ip = None , additional_info = None , ioc_links = None , compromised = None , custom_attributes = None , cid = None , no_sync = False ) Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 def update_asset ( self , asset_id : int , name : str = None , asset_type : Union [ str , int ] = None , tags : List [ str ] = None , analysis_status : Union [ str , int ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , compromised : bool = None , custom_attributes : dict = None , cid : int = None , no_sync = False ) -> ApiResponse : \"\"\" Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) asset = None if not no_sync : asset_req = self . get_asset ( asset_id = asset_id , cid = cid ) if asset_req . is_error (): return asset_req asset = asset_req . get_data () if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } not found\" ) else : analysis_status = analysis_status_r if ioc_links : for link in ioc_links : ioc = self . get_ioc ( ioc_id = int ( link )) if ioc . is_error (): return ClientApiError ( msg = f \"IOC { link } was not found\" , error = ioc . get_data ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name if name is not None or no_sync else asset . get ( 'asset_name' ), \"asset_type_id\" : asset_type if asset_type is not None or no_sync else int ( asset . get ( 'asset_type_id' )), \"analysis_status_id\" : analysis_status if analysis_status is not None or no_sync else int ( asset . get ( 'analysis_status_id' )), \"asset_description\" : description if description is not None or no_sync else asset . get ( 'analysis_status' ), \"asset_domain\" : domain if domain is not None or no_sync else asset . get ( 'asset_domain' ), \"asset_ip\" : ip if ip is not None or no_sync else asset . get ( 'asset_ip' ), \"asset_info\" : additional_info if additional_info is not None or no_sync else asset . get ( 'asset_info' ), \"asset_compromised\" : compromised if compromised is not None or no_sync else asset . get ( 'asset_compromise' ), \"asset_tags\" : ',' . join ( tags ) if tags is not None or no_sync else asset . get ( 'asset_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else asset . get ( 'custom_attributes' ), \"cid\" : cid } if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] return self . _s . pi_post ( f 'case/assets/update/ { asset_id } ' , data = body ) update_event ( event_id , title = None , date_time = None , content = None , raw_content = None , source = None , linked_assets = None , category = None , tags = None , color = None , display_in_graph = None , display_in_summary = None , custom_attributes = None , cid = None , timezone_string = None ) Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 def update_event ( self , event_id : int , title : str = None , date_time : datetime = None , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : dict = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) event_req = self . get_event ( event_id , cid = cid ) if event_req . is_error (): return ClientApiError ( msg = event_req . get_msg ()) event = event_req . get_data () if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if date_time and not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title if title else event . get ( 'event_title' ), \"event_in_graph\" : display_in_graph if display_in_graph is not None else event . get ( 'event_in_graph' ), \"event_in_summary\" : display_in_summary if display_in_summary is not None else event . get ( 'event_in_summary' ), \"event_content\" : content if content else event . get ( 'event_content' ), \"event_raw\" : raw_content if raw_content else event . get ( 'event_raw' ), \"event_source\" : source if source else event . get ( 'event_source' ), \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else event . get ( 'event_category_id' ), \"event_color\" : color if color else event . get ( 'event_color' ), \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ) if date_time else event . get ( 'event_date' ), \"event_tags\" : ',' . join ( tags ) if tags else event . get ( 'event_tags' ), \"event_tz\" : timezone_string if timezone_string else event . get ( 'event_tz' ), \"custom_attributes\" : custom_attributes if custom_attributes else event . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/update/ { event_id } ' , data = body ) update_evidence ( evidence_id , filename = None , file_size = None , description = None , file_hash = None , custom_attributes = None , cid = None ) Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 def update_evidence ( self , evidence_id : int , filename : str = None , file_size : int = None , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) evidence_req = self . get_evidence ( evidence_id = evidence_id , cid = cid ) if evidence_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch evidence # { evidence_id } for update' , error = evidence_req . get_msg ()) evidence = evidence_req . get_data () if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename if filename else evidence . get ( 'filename' ), \"file_size\" : file_size if file_size else evidence . get ( 'file_size' ), \"file_description\" : description if description else evidence . get ( 'file_description' ), \"file_hash\" : file_hash if file_hash else evidence . get ( 'file_hash' ), \"custom_attributes\" : custom_attributes if custom_attributes else evidence . get ( \"custom_attributes\" ), \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/update/ { evidence_id } ' , data = body ) update_global_task ( task_id , title = None , status = None , assignee = None , description = None , tags = None ) Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object Source code in dfir_iris_client/case.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def update_global_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object \"\"\" task_req = self . get_global_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), } return self . _s . pi_post ( f 'global/tasks/update/ { task_id } ' , data = body ) update_ioc ( ioc_id , value = None , ioc_type = None , description = None , ioc_tlp = None , ioc_tags = None , custom_attributes = None , cid = None ) Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 def update_ioc ( self , ioc_id : int , value : str = None , ioc_type : Union [ str , int ] = None , description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) ioc_req = self . get_ioc ( ioc_id , cid = cid ) if ioc_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch IOC # { ioc_id } for update' , error = ioc_req . get_msg ()) ioc = ioc_req . get_data () if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value if value else ioc . get ( 'ioc_value' ), \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else int ( ioc . get ( 'ioc_tlp_id' )), \"ioc_type_id\" : ioc_type if ioc_type else int ( ioc . get ( 'ioc_type_id' )), \"ioc_description\" : description if description else ioc . get ( 'ioc_description' ), \"ioc_tags\" : \",\" . join ( ioc_tags ) if ioc_tags else ioc . get ( 'ioc_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else ioc . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/ioc/update/ { ioc_id } ' , data = body ) update_note ( note_id , note_title = None , note_content = None , custom_attributes = None , cid = None ) Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object Source code in dfir_iris_client/case.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def update_note ( self , note_id : int , note_title : str = None , note_content : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note_req = self . get_note ( note_id = note_id , cid = cid ) if note_req . is_error (): return ClientApiError ( f 'Unable to fetch note # { note_id } for update' , msg = note_req . get_msg ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note = note_req . get_data () body = { \"note_title\" : note_title if note_title else note . get ( 'note_title' ), \"note_content\" : note_content if note_content else note . get ( 'note_content' ), \"custom_attributes\" : custom_attributes , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/update/ { note_id } ' , data = body ) update_notes_group ( group_id , group_title , cid = None ) Updates a notes group in the target cid case. group_id need to be an existing group in the target case. group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object Source code in dfir_iris_client/case.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 def update_notes_group ( self , group_id : int , group_title : str , cid : int = None ) -> ApiResponse : \"\"\" Updates a notes group in the target cid case. `group_id` need to be an existing group in the target case. `group_title` can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"group_id\" : group_id , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/update' , data = body ) update_task ( task_id , title = None , status = None , assignee = None , description = None , tags = None , custom_attributes = None , cid = None ) Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object Source code in dfir_iris_client/case.py 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 def update_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) task_req = self . get_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), \"custom_attributes\" : custom_attributes if custom_attributes else task . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/update/ { task_id } ' , data = body )","title":"Case"},{"location":"python_client/references/case/#dfir_iris_client.case.Case","text":"Bases: object Handles the case methods Source code in dfir_iris_client/case.pyclass Case ( object ): \"\"\" Handles the case methods \"\"\" def __init__ ( self , session , case_id : int = None ): self . _s = session self . _cid = case_id def list_cases ( self ) -> ApiResponse : \"\"\" Returns a list of all the cases :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid = 1 ) return self . _s . pi_get ( 'manage/cases/list' , cid = cid ) def get_case ( self , cid : int ) -> ApiResponse : \"\"\" Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/cases/ { cid } ' ) def add_case ( self , case_name : str , case_description : str , case_customer : Union [ str , int ], soc_id : str , custom_attributes : dict = None , create_customer = False ) -> ApiResponse : \"\"\" Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object \"\"\" if isinstance ( case_customer , str ): # Get the customer ID customer = Customer ( session = self . _s ) c_id = customer . lookup_customer ( customer_name = case_customer ) if c_id . is_error (): if create_customer : adm = AdminHelper ( self . _s ) c_resp = adm . add_customer ( customer_name = case_customer ) if c_resp . is_error (): return c_resp c_id = c_resp else : return ClientApiError ( f 'Customer { case_customer } wasn \\' t found. Check syntax or set ' f 'create_customer flag to create it' ) if c_id . is_error (): return c_id case_customer = c_id . get_data () . get ( 'customer_id' ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"case_name\" : case_name , \"case_customer\" : case_customer , \"case_soc_id\" : soc_id , \"case_description\" : case_description , \"custom_attributes\" : custom_attributes } resp = self . _s . pi_post ( 'manage/cases/add' , data = body ) return resp def delete_case ( self , cid : int ) -> ApiResponse : \"\"\" Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse \"\"\" resp = self . _s . pi_get ( f 'manage/cases/delete/ { cid } ' ) return resp def case_id_exists ( self , cid : int ) -> bool : \"\"\" Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false \"\"\" resp = self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) return resp . is_success () def set_cid ( self , cid : int ) -> bool : \"\"\" Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true \"\"\" self . _cid = cid return True def _assert_cid ( self , cid : int ) -> int : \"\"\" Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int \"\"\" if not cid and not self . _cid : raise Exception ( \"No case ID provided. Either use cid argument or set_cid method\" ) if not cid : cid = self . _cid if not isinstance ( cid , int ): raise Exception ( f 'Invalid CID type. Got { type ( cid ) } but was expecting int' ) return cid def get_summary ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) def set_summary ( self , summary_content : str = None , cid : int = None ) -> ApiResponse : \"\"\" Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"case_description\" : summary_content , \"cid\" : cid } return self . _s . pi_post ( 'case/summary/update' , data = body ) def list_notes_groups ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/notes/groups/list' , cid = cid ) def get_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/ { group_id } ' , cid = cid ) def add_notes_group ( self , group_title : str = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/add' , data = body ) def update_notes_group ( self , group_id : int , group_title : str , cid : int = None ) -> ApiResponse : \"\"\" Updates a notes group in the target cid case. `group_id` need to be an existing group in the target case. `group_title` can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"group_id\" : group_id , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/update' , data = body ) def delete_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/delete/ { group_id } ' , cid = cid ) def get_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/ { note_id } ' , cid = cid ) def update_note ( self , note_id : int , note_title : str = None , note_content : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note_req = self . get_note ( note_id = note_id , cid = cid ) if note_req . is_error (): return ClientApiError ( f 'Unable to fetch note # { note_id } for update' , msg = note_req . get_msg ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note = note_req . get_data () body = { \"note_title\" : note_title if note_title else note . get ( 'note_title' ), \"note_content\" : note_content if note_content else note . get ( 'note_content' ), \"custom_attributes\" : custom_attributes , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/update/ { note_id } ' , data = body ) def delete_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/delete/ { note_id } ' , cid = cid ) def add_note ( self , note_title : str , note_content : str , group_id : int , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"note_title\" : note_title , \"note_content\" : note_content , \"group_id\" : group_id , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/add' , data = body ) def search_notes ( self , search_term : str , cid : int = None ) -> ApiResponse : \"\"\" Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"search_term\" : search_term , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/search' , data = body ) def list_assets ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/assets/list' , cid = cid ) def add_asset ( self , name : str , asset_type : Union [ str , int ], analysis_status : Union [ str , int ], compromised : bool = None , tags : List [ str ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } was not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } was not found\" ) else : analysis_status = analysis_status_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name , \"asset_type_id\" : asset_type , \"analysis_status_id\" : analysis_status , \"cid\" : cid } if description is not None : body [ 'asset_description' ] = description if domain is not None : body [ 'asset_domain' ] = domain if ip is not None : body [ 'asset_ip' ] = ip if additional_info is not None : body [ 'asset_info' ] = additional_info if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] if compromised is not None : body [ 'asset_compromised' ] = compromised if tags is not None : body [ 'asset_tags' ] = ',' . join ( tags ) if custom_attributes is not None : body [ 'custom_attributes' ] = custom_attributes return self . _s . pi_post ( f 'case/assets/add' , data = body ) def get_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/ { asset_id } ' , cid = cid ) def asset_exists ( self , asset_id : int , cid : int = None ) -> bool : \"\"\" Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false \"\"\" cid = self . _assert_cid ( cid ) resp = self . get_asset ( asset_id = asset_id , cid = cid ) return resp . is_success () def update_asset ( self , asset_id : int , name : str = None , asset_type : Union [ str , int ] = None , tags : List [ str ] = None , analysis_status : Union [ str , int ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , compromised : bool = None , custom_attributes : dict = None , cid : int = None , no_sync = False ) -> ApiResponse : \"\"\" Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) asset = None if not no_sync : asset_req = self . get_asset ( asset_id = asset_id , cid = cid ) if asset_req . is_error (): return asset_req asset = asset_req . get_data () if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } not found\" ) else : analysis_status = analysis_status_r if ioc_links : for link in ioc_links : ioc = self . get_ioc ( ioc_id = int ( link )) if ioc . is_error (): return ClientApiError ( msg = f \"IOC { link } was not found\" , error = ioc . get_data ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name if name is not None or no_sync else asset . get ( 'asset_name' ), \"asset_type_id\" : asset_type if asset_type is not None or no_sync else int ( asset . get ( 'asset_type_id' )), \"analysis_status_id\" : analysis_status if analysis_status is not None or no_sync else int ( asset . get ( 'analysis_status_id' )), \"asset_description\" : description if description is not None or no_sync else asset . get ( 'analysis_status' ), \"asset_domain\" : domain if domain is not None or no_sync else asset . get ( 'asset_domain' ), \"asset_ip\" : ip if ip is not None or no_sync else asset . get ( 'asset_ip' ), \"asset_info\" : additional_info if additional_info is not None or no_sync else asset . get ( 'asset_info' ), \"asset_compromised\" : compromised if compromised is not None or no_sync else asset . get ( 'asset_compromise' ), \"asset_tags\" : ',' . join ( tags ) if tags is not None or no_sync else asset . get ( 'asset_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else asset . get ( 'custom_attributes' ), \"cid\" : cid } if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] return self . _s . pi_post ( f 'case/assets/update/ { asset_id } ' , data = body ) def delete_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/delete/ { asset_id } ' , cid = cid ) def list_iocs ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/ioc/list' , cid = cid ) def add_ioc ( self , value : str , ioc_type : Union [ str , int ], description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value , \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else 2 , \"ioc_type_id\" : ioc_type , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } if description : body [ 'ioc_description' ] = description if ioc_tags : body [ 'ioc_tags' ] = \",\" . join ( ioc_tags ) return self . _s . pi_post ( f 'case/ioc/add' , data = body ) def get_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/ { ioc_id } ' , cid = cid ) def update_ioc ( self , ioc_id : int , value : str = None , ioc_type : Union [ str , int ] = None , description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) ioc_req = self . get_ioc ( ioc_id , cid = cid ) if ioc_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch IOC # { ioc_id } for update' , error = ioc_req . get_msg ()) ioc = ioc_req . get_data () if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value if value else ioc . get ( 'ioc_value' ), \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else int ( ioc . get ( 'ioc_tlp_id' )), \"ioc_type_id\" : ioc_type if ioc_type else int ( ioc . get ( 'ioc_type_id' )), \"ioc_description\" : description if description else ioc . get ( 'ioc_description' ), \"ioc_tags\" : \",\" . join ( ioc_tags ) if ioc_tags else ioc . get ( 'ioc_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else ioc . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/ioc/update/ { ioc_id } ' , data = body ) def delete_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/delete/ { ioc_id } ' , cid = cid ) def get_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/ { event_id } ' , cid = cid ) def list_events ( self , filter_by_asset : int = 0 , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/list/filter/ { filter_by_asset } ' , cid = cid ) def add_event ( self , title : str , date_time : datetime , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : str = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title , \"event_in_graph\" : display_in_graph if display_in_graph is not None else True , \"event_in_summary\" : display_in_summary if display_in_summary is not None else False , \"event_content\" : content if content else \"\" , \"event_raw\" : raw_content if raw_content else \"\" , \"event_source\" : source if source else \"\" , \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else \"1\" , \"event_color\" : color if color else \"\" , \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ), \"event_tags\" : ',' . join ( tags ) if tags else '' , \"event_tz\" : timezone_string if timezone_string else \"+00:00\" , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/add' , data = body ) def update_event ( self , event_id : int , title : str = None , date_time : datetime = None , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : dict = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) event_req = self . get_event ( event_id , cid = cid ) if event_req . is_error (): return ClientApiError ( msg = event_req . get_msg ()) event = event_req . get_data () if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if date_time and not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title if title else event . get ( 'event_title' ), \"event_in_graph\" : display_in_graph if display_in_graph is not None else event . get ( 'event_in_graph' ), \"event_in_summary\" : display_in_summary if display_in_summary is not None else event . get ( 'event_in_summary' ), \"event_content\" : content if content else event . get ( 'event_content' ), \"event_raw\" : raw_content if raw_content else event . get ( 'event_raw' ), \"event_source\" : source if source else event . get ( 'event_source' ), \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else event . get ( 'event_category_id' ), \"event_color\" : color if color else event . get ( 'event_color' ), \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ) if date_time else event . get ( 'event_date' ), \"event_tags\" : ',' . join ( tags ) if tags else event . get ( 'event_tags' ), \"event_tz\" : timezone_string if timezone_string else event . get ( 'event_tz' ), \"custom_attributes\" : custom_attributes if custom_attributes else event . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/update/ { event_id } ' , data = body ) def delete_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/delete/ { event_id } ' , cid = cid ) def add_task_log ( self , message : str , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid ) data = { \"log_content\" : message , \"cid\" : cid } return self . _s . pi_post ( f 'case/tasklog/add' , data = data ) def list_tasks ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/list' , cid = cid ) def get_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/ { task_id } ' , cid = cid ) def add_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/add' , data = body ) def update_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) task_req = self . get_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), \"custom_attributes\" : custom_attributes if custom_attributes else task . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/update/ { task_id } ' , data = body ) def delete_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/delete/ { task_id } ' , cid = cid ) def list_evidences ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of evidences. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/list' , cid = cid ) def get_evidence ( self , evidence_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/ { evidence_id } ' , cid = cid ) def add_evidence ( self , filename : str , file_size : int , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename , \"file_size\" : file_size , \"file_description\" : description , \"file_hash\" : file_hash , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/add' , data = body ) def update_evidence ( self , evidence_id : int , filename : str = None , file_size : int = None , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) evidence_req = self . get_evidence ( evidence_id = evidence_id , cid = cid ) if evidence_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch evidence # { evidence_id } for update' , error = evidence_req . get_msg ()) evidence = evidence_req . get_data () if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename if filename else evidence . get ( 'filename' ), \"file_size\" : file_size if file_size else evidence . get ( 'file_size' ), \"file_description\" : description if description else evidence . get ( 'file_description' ), \"file_hash\" : file_hash if file_hash else evidence . get ( 'file_hash' ), \"custom_attributes\" : custom_attributes if custom_attributes else evidence . get ( \"custom_attributes\" ), \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/update/ { evidence_id } ' , data = body ) def delete_evidence ( self , evidence_id : int , cid : int = None ): \"\"\" Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/delete/ { evidence_id } ' , cid = cid ) def list_global_tasks ( self ) -> ApiResponse : \"\"\" Return a list of global tasks. :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/list' , cid = 1 ) def get_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/ { task_id } ' , cid = 1 ) def add_global_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object \"\"\" if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"cid\" : 1 } return self . _s . pi_post ( f 'global/tasks/add' , data = body ) def update_global_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object \"\"\" task_req = self . get_global_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), } return self . _s . pi_post ( f 'global/tasks/update/ { task_id } ' , data = body ) def delete_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/delete/ { task_id } ' , cid = 1 )","title":"Case"},{"location":"python_client/references/case/#dfir_iris_client.case.Case._assert_cid","text":"Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int Source code in dfir_iris_client/case.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def _assert_cid ( self , cid : int ) -> int : \"\"\" Verifies that the provided cid is set. This does not verify the validity of the cid. If an invalid CID is set, the requests are emitted but will likely fail. :raises: Exception is Case ID format is invalid :param cid: Case ID :return: CaseID as int \"\"\" if not cid and not self . _cid : raise Exception ( \"No case ID provided. Either use cid argument or set_cid method\" ) if not cid : cid = self . _cid if not isinstance ( cid , int ): raise Exception ( f 'Invalid CID type. Got { type ( cid ) } but was expecting int' ) return cid","title":"_assert_cid()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_asset","text":"Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 def add_asset ( self , name : str , asset_type : Union [ str , int ], analysis_status : Union [ str , int ], compromised : bool = None , tags : List [ str ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an asset to the target case id. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param name: Name of the asset to add :param asset_type: Name or ID of the asset type :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param compromised: Set to true if asset is compromised :param tags: List of tags :param ioc_links: List of IOC to link to this asset :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } was not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } was not found\" ) else : analysis_status = analysis_status_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name , \"asset_type_id\" : asset_type , \"analysis_status_id\" : analysis_status , \"cid\" : cid } if description is not None : body [ 'asset_description' ] = description if domain is not None : body [ 'asset_domain' ] = domain if ip is not None : body [ 'asset_ip' ] = ip if additional_info is not None : body [ 'asset_info' ] = additional_info if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] if compromised is not None : body [ 'asset_compromised' ] = compromised if tags is not None : body [ 'asset_tags' ] = ',' . join ( tags ) if custom_attributes is not None : body [ 'custom_attributes' ] = custom_attributes return self . _s . pi_post ( f 'case/assets/add' , data = body )","title":"add_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_case","text":"Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object Source code in dfir_iris_client/case.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def add_case ( self , case_name : str , case_description : str , case_customer : Union [ str , int ], soc_id : str , custom_attributes : dict = None , create_customer = False ) -> ApiResponse : \"\"\" Creates a new case. If create_customer is set to true and the customer doesn't exist, it is created. Otherwise an error is returned. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param case_name: case_name :param case_description: Description of the case :param case_customer: Name or ID of the customer :param soc_id: SOC Number :param custom_attributes: Custom attributes of the case :param create_customer: Set to true to create the customer is doesn't exists. :return: ApiResponse object \"\"\" if isinstance ( case_customer , str ): # Get the customer ID customer = Customer ( session = self . _s ) c_id = customer . lookup_customer ( customer_name = case_customer ) if c_id . is_error (): if create_customer : adm = AdminHelper ( self . _s ) c_resp = adm . add_customer ( customer_name = case_customer ) if c_resp . is_error (): return c_resp c_id = c_resp else : return ClientApiError ( f 'Customer { case_customer } wasn \\' t found. Check syntax or set ' f 'create_customer flag to create it' ) if c_id . is_error (): return c_id case_customer = c_id . get_data () . get ( 'customer_id' ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"case_name\" : case_name , \"case_customer\" : case_customer , \"case_soc_id\" : soc_id , \"case_description\" : case_description , \"custom_attributes\" : custom_attributes } resp = self . _s . pi_post ( 'manage/cases/add' , data = body ) return resp","title":"add_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_event","text":"Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 def add_event ( self , title : str , date_time : datetime , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : str = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Adds a new event to the timeline. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title , \"event_in_graph\" : display_in_graph if display_in_graph is not None else True , \"event_in_summary\" : display_in_summary if display_in_summary is not None else False , \"event_content\" : content if content else \"\" , \"event_raw\" : raw_content if raw_content else \"\" , \"event_source\" : source if source else \"\" , \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else \"1\" , \"event_color\" : color if color else \"\" , \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ), \"event_tags\" : ',' . join ( tags ) if tags else '' , \"event_tz\" : timezone_string if timezone_string else \"+00:00\" , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/add' , data = body )","title":"add_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_evidence","text":"Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 def add_evidence ( self , filename : str , file_size : int , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new evidence to the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: Custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename , \"file_size\" : file_size , \"file_description\" : description , \"file_hash\" : file_hash , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/add' , data = body )","title":"add_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_global_task","text":"Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object Source code in dfir_iris_client/case.py 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 def add_global_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Adds a new task. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param tags: Tags of the task :param status: String or status ID, need to be a valid status :return: APIResponse object \"\"\" if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"cid\" : 1 } return self . _s . pi_post ( f 'global/tasks/add' , data = body )","title":"add_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_ioc","text":"Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse Source code in dfir_iris_client/case.py 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 def add_ioc ( self , value : str , ioc_type : Union [ str , int ], description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds an ioc to the target case id. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Optional - Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add :param custom_attributes: Custom attributes of the ioc :param cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value , \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else 2 , \"ioc_type_id\" : ioc_type , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } if description : body [ 'ioc_description' ] = description if ioc_tags : body [ 'ioc_tags' ] = \",\" . join ( ioc_tags ) return self . _s . pi_post ( f 'case/ioc/add' , data = body )","title":"add_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_note","text":"Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object Source code in dfir_iris_client/case.py 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 def add_note ( self , note_title : str , note_content : str , group_id : int , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new note. Case ID and group note ID need to match the case in which the note is stored. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_title: Title of the note :param note_content: Content of the note :param group_id: Target group to attach the note to :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"note_title\" : note_title , \"note_content\" : note_content , \"group_id\" : group_id , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/add' , data = body )","title":"add_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_notes_group","text":"Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object Source code in dfir_iris_client/case.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def add_notes_group ( self , group_title : str = None , cid : int = None ) -> ApiResponse : \"\"\" Creates a new notes group in the target cid case. Group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_title: Name of the group to add :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/add' , data = body )","title":"add_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_task","text":"Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object Source code in dfir_iris_client/case.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 def add_task ( self , title : str , status : Union [ str , int ], assignee : Union [ str , int ], description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task to the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or username :param cid: Case ID :param tags: Tags of the task :param status: String or status ID, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"task_assignee_id\" : assignee , \"task_description\" : description if description else \"\" , \"task_status_id\" : status , \"task_tags\" : ',' . join ( tags ) if tags else \"\" , \"task_title\" : title , \"custom_attributes\" : custom_attributes if custom_attributes else {}, \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/add' , data = body )","title":"add_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.add_task_log","text":"Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse Source code in dfir_iris_client/case.py 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 def add_task_log ( self , message : str , cid : int = None ) -> ApiResponse : \"\"\" Adds a new task log that will appear under activities :param message: Message to log :param cid: Case ID :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid ) data = { \"log_content\" : message , \"cid\" : cid } return self . _s . pi_post ( f 'case/tasklog/add' , data = data )","title":"add_task_log()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.asset_exists","text":"Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false Source code in dfir_iris_client/case.py 494 495 496 497 498 499 500 501 502 503 504 505 506 def asset_exists ( self , asset_id : int , cid : int = None ) -> bool : \"\"\" Returns true if asset_id exists in the context of the current case or cid. This method is an overlay of get_asset and thus not performant. :param asset_id: Asset to lookup :param cid: Case ID :return: True if exists else false \"\"\" cid = self . _assert_cid ( cid ) resp = self . get_asset ( asset_id = asset_id , cid = cid ) return resp . is_success ()","title":"asset_exists()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.case_id_exists","text":"Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false Source code in dfir_iris_client/case.py 133 134 135 136 137 138 139 140 141 142 143 144 def case_id_exists ( self , cid : int ) -> bool : \"\"\" Checks if a case id is valid by probing the summary endpoint. This method returns true if the probe was successful. If False is returned it might not indicate the case doesn't exist but might be the result of a request malfunction (server down, invalid API token, etc). :param cid: int - Case ID to check :return: True if case ID exists otherwise false \"\"\" resp = self . _s . pi_get ( f 'case/summary/fetch' , cid = cid ) return resp . is_success ()","title":"case_id_exists()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_asset","text":"Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 596 597 598 599 600 601 602 603 604 605 606 def delete_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an asset identified by asset_id. CID must match the case in which the asset is stored. :param: asset_id: ID of the asset to remove :param: cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/delete/ { asset_id } ' , cid = cid )","title":"delete_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_case","text":"Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse Source code in dfir_iris_client/case.py 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def delete_case ( self , cid : int ) -> ApiResponse : \"\"\" Deletes a case based on its ID. All objects associated to the case are deleted. This includes : - assets, - iocs that are only referenced in this case - notes - summary - events - evidences - tasklogs :param cid: int - Case to delete :return: ApiResponse \"\"\" resp = self . _s . pi_get ( f 'manage/cases/delete/ { cid } ' ) return resp","title":"delete_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_event","text":"Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 949 950 951 952 953 954 955 956 957 958 959 def delete_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an event from its ID. CID must match the case in which the event is stored :param event_id: Event to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/delete/ { event_id } ' , cid = cid )","title":"delete_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_evidence","text":"Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 def delete_evidence ( self , evidence_id : int , cid : int = None ): \"\"\" Deletes an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: int - Evidence to delete :param cid: int - Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/delete/ { evidence_id } ' , cid = cid )","title":"delete_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_global_task","text":"Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object Source code in dfir_iris_client/case.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 def delete_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Deletes a global task from its ID. task_id needs to be an existing task in the database. :param task_id: int - Task to delete :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/delete/ { task_id } ' , cid = 1 )","title":"delete_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_ioc","text":"Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 763 764 765 766 767 768 769 770 771 772 773 def delete_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes an IOC from its ID. CID must match the case in which the ioc is stored. :param ioc_id: ID of the ioc :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/delete/ { ioc_id } ' , cid = cid )","title":"delete_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_note","text":"Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object Source code in dfir_iris_client/case.py 329 330 331 332 333 334 335 336 337 338 339 def delete_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: Name of the note to delete :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/delete/ { note_id } ' , cid = cid )","title":"delete_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_notes_group","text":"Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object Source code in dfir_iris_client/case.py 265 266 267 268 269 270 271 272 273 274 275 def delete_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a notes group. All notes in the target groups are deleted ! There is not way to get the notes back. Case ID needs to match the case where the group is stored. :param cid: Case ID :param group_id: ID of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/delete/ { group_id } ' , cid = cid )","title":"delete_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.delete_task","text":"Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 def delete_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Deletes a task from its ID. CID must match the case in which the task is stored. :param task_id: Task to delete :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/delete/ { task_id } ' , cid = cid )","title":"delete_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_asset","text":"Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 482 483 484 485 486 487 488 489 490 491 492 def get_asset ( self , asset_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an asset information from its ID. :param asset_id: ID of the asset to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/assets/ { asset_id } ' , cid = cid )","title":"get_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_case","text":"Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object Source code in dfir_iris_client/case.py 49 50 51 52 53 54 55 56 def get_case ( self , cid : int ) -> ApiResponse : \"\"\" Gets an existing case from its ID :param cid: CaseID to fetch :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'manage/cases/ { cid } ' )","title":"get_case()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_event","text":"Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 775 776 777 778 779 780 781 782 783 784 785 def get_event ( self , event_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an event from the timeline :param event_id: ID of the event to fetch :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/ { event_id } ' , cid = cid )","title":"get_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_evidence","text":"Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 def get_evidence ( self , evidence_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an evidence from its ID. evidence_id needs to be an existing evidence in the target case. :param evidence_id: Evidence ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/ { evidence_id } ' , cid = cid )","title":"get_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_global_task","text":"Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object Source code in dfir_iris_client/case.py 1257 1258 1259 1260 1261 1262 1263 1264 1265 def get_global_task ( self , task_id : int ) -> ApiResponse : \"\"\" Returns a global task from its ID. :param task_id: Task ID to lookup :return: APIResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/ { task_id } ' , cid = 1 )","title":"get_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_ioc","text":"Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 683 684 685 686 687 688 689 690 691 692 693 def get_ioc ( self , ioc_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns an IOC. ioc_id needs to be an existing ioc in the provided case ID. :param ioc_id: IOC ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/ioc/ { ioc_id } ' , cid = cid )","title":"get_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_note","text":"Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object Source code in dfir_iris_client/case.py 277 278 279 280 281 282 283 284 285 286 287 def get_note ( self , note_id : int , cid : int = None ) -> ApiResponse : \"\"\" Fetches a note. note_id needs to be a valid existing note in the target case. :param cid: Case ID :param note_id: ID of the note to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/ { note_id } ' , cid = cid )","title":"get_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_notes_group","text":"Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object Source code in dfir_iris_client/case.py 218 219 220 221 222 223 224 225 226 227 228 def get_notes_group ( self , group_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a notes group based on its ID. The group ID needs to match the CID where it is stored. :param cid: Case ID :param group_id: Group ID to fetch :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/notes/groups/ { group_id } ' , cid = cid )","title":"get_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_summary","text":"Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 178 179 180 181 182 183 184 185 186 def get_summary ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns the summary of the specified case id. :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/summary/fetch' , cid = cid )","title":"get_summary()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.get_task","text":"Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 988 989 990 991 992 993 994 995 996 997 998 def get_task ( self , task_id : int , cid : int = None ) -> ApiResponse : \"\"\" Returns a task from its ID. task_id needs to be a valid task in the target case. :param task_id: Task ID to lookup :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/ { task_id } ' , cid = cid )","title":"get_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_assets","text":"Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 391 392 393 394 395 396 397 398 399 400 def list_assets ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all assets of the target case. :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/assets/list' , cid = cid )","title":"list_assets()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_cases","text":"Returns a list of all the cases :return: ApiResponse Source code in dfir_iris_client/case.py 40 41 42 43 44 45 46 47 def list_cases ( self ) -> ApiResponse : \"\"\" Returns a list of all the cases :return: ApiResponse \"\"\" cid = self . _assert_cid ( cid = 1 ) return self . _s . pi_get ( 'manage/cases/list' , cid = cid )","title":"list_cases()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_events","text":"Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 787 788 789 790 791 792 793 794 795 796 797 798 def list_events ( self , filter_by_asset : int = 0 , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of events from the timeline. filter_by_asset can be used to return only the events linked to a specific asset. In case the asset doesn't exist, an empty timeline is returned. :param filter_by_asset: Select the timeline of a specific asset by setting an existing asset ID :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/timeline/events/list/filter/ { filter_by_asset } ' , cid = cid )","title":"list_events()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_evidences","text":"Returns a list of evidences. :param cid: Case ID :return: ApiResponse object Source code in dfir_iris_client/case.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 def list_evidences ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of evidences. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/evidences/list' , cid = cid )","title":"list_evidences()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_global_tasks","text":"Return a list of global tasks. :return: ApiResponse object Source code in dfir_iris_client/case.py 1249 1250 1251 1252 1253 1254 1255 def list_global_tasks ( self ) -> ApiResponse : \"\"\" Return a list of global tasks. :return: ApiResponse object \"\"\" return self . _s . pi_get ( f 'global/tasks/list' , cid = 1 )","title":"list_global_tasks()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_iocs","text":"Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse Source code in dfir_iris_client/case.py 608 609 610 611 612 613 614 615 616 617 def list_iocs ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of all iocs of the target case. :param: cid: Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/ioc/list' , cid = cid )","title":"list_iocs()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_notes_groups","text":"Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 208 209 210 211 212 213 214 215 216 def list_notes_groups ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of notes groups of the target cid case :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( 'case/notes/groups/list' , cid = cid )","title":"list_notes_groups()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.list_tasks","text":"Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object Source code in dfir_iris_client/case.py 977 978 979 980 981 982 983 984 985 986 def list_tasks ( self , cid : int = None ) -> ApiResponse : \"\"\" Returns a list of tasks linked to the provided case. :param cid: Case ID :return: ApiResponse object \"\"\" cid = self . _assert_cid ( cid ) return self . _s . pi_get ( f 'case/tasks/list' , cid = cid )","title":"list_tasks()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.search_notes","text":"Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object Source code in dfir_iris_client/case.py 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 def search_notes ( self , search_term : str , cid : int = None ) -> ApiResponse : \"\"\" Searches in notes. Case ID and group note ID need to match the case in which the notes are stored. Only the titles and notes ID of the matching notes are return, not the actual content. Use % for wildcard. :param cid: int - Case ID :param search_term: str - Term to search in notes :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"search_term\" : search_term , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/search' , data = body )","title":"search_notes()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.set_cid","text":"Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true Source code in dfir_iris_client/case.py 146 147 148 149 150 151 152 153 154 155 156 def set_cid ( self , cid : int ) -> bool : \"\"\" Sets the current cid for the Case instance. It can be override be setting the cid of each method though not recommended to keep consistency. :param cid: Case ID :return: Always true \"\"\" self . _cid = cid return True","title":"set_cid()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.set_summary","text":"Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object Source code in dfir_iris_client/case.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def set_summary ( self , summary_content : str = None , cid : int = None ) -> ApiResponse : \"\"\" Sets the summary of the specified case id. .. warning:: This completely replace the current content of the summary. Any co-worker working on the summary will receive an overwrite order from the server. The order is immediately received by web socket. This method should probably be only used when setting a new case. :param cid: Case ID :param summary_content: Content of the summary to push. This will completely replace the current content :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"case_description\" : summary_content , \"cid\" : cid } return self . _s . pi_post ( 'case/summary/update' , data = body )","title":"set_summary()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_asset","text":"Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse Source code in dfir_iris_client/case.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 def update_asset ( self , asset_id : int , name : str = None , asset_type : Union [ str , int ] = None , tags : List [ str ] = None , analysis_status : Union [ str , int ] = None , description : str = None , domain : str = None , ip : str = None , additional_info : str = None , ioc_links : List [ int ] = None , compromised : bool = None , custom_attributes : dict = None , cid : int = None , no_sync = False ) -> ApiResponse : \"\"\" Updates an asset. asset_id needs to be an existing asset in the target case cid. If they are strings, asset_types and analysis_status are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param asset_id: ID of the asset to update :param name: Name of the asset :param asset_type: Name or ID of the asset type :param tags: List of tags :param description: Description of the asset :param domain: Domain of the asset :param ip: IP of the asset :param additional_info: Additional information, :param analysis_status: Status of the analysis :param ioc_links: List of IOC to link to this asset :param compromised: True is asset is compromised :param custom_attributes: Custom attributes of the asset :param cid: int - Case ID :return: APIResponse \"\"\" cid = self . _assert_cid ( cid ) asset = None if not no_sync : asset_req = self . get_asset ( asset_id = asset_id , cid = cid ) if asset_req . is_error (): return asset_req asset = asset_req . get_data () if isinstance ( asset_type , str ): ast = AssetTypeHelper ( session = self . _s ) asset_type_r = ast . lookup_asset_type_name ( asset_type_name = asset_type ) if not asset_type_r : return ClientApiError ( msg = f 'Asset type { asset_type } not found' ) else : asset_type = asset_type_r if isinstance ( analysis_status , str ): ant = AnalysisStatusHelper ( self . _s ) analysis_status_r = ant . lookup_analysis_status_name ( analysis_status_name = analysis_status ) if not analysis_status_r : return ClientApiError ( msg = f \"Analysis status { analysis_status } not found\" ) else : analysis_status = analysis_status_r if ioc_links : for link in ioc_links : ioc = self . get_ioc ( ioc_id = int ( link )) if ioc . is_error (): return ClientApiError ( msg = f \"IOC { link } was not found\" , error = ioc . get_data ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"asset_name\" : name if name is not None or no_sync else asset . get ( 'asset_name' ), \"asset_type_id\" : asset_type if asset_type is not None or no_sync else int ( asset . get ( 'asset_type_id' )), \"analysis_status_id\" : analysis_status if analysis_status is not None or no_sync else int ( asset . get ( 'analysis_status_id' )), \"asset_description\" : description if description is not None or no_sync else asset . get ( 'analysis_status' ), \"asset_domain\" : domain if domain is not None or no_sync else asset . get ( 'asset_domain' ), \"asset_ip\" : ip if ip is not None or no_sync else asset . get ( 'asset_ip' ), \"asset_info\" : additional_info if additional_info is not None or no_sync else asset . get ( 'asset_info' ), \"asset_compromised\" : compromised if compromised is not None or no_sync else asset . get ( 'asset_compromise' ), \"asset_tags\" : ',' . join ( tags ) if tags is not None or no_sync else asset . get ( 'asset_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else asset . get ( 'custom_attributes' ), \"cid\" : cid } if ioc_links is not None : body [ 'ioc_links' ] = [ str ( ioc ) for ioc in ioc_links ] return self . _s . pi_post ( f 'case/assets/update/ { asset_id } ' , data = body )","title":"update_asset()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_event","text":"Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 def update_event ( self , event_id : int , title : str = None , date_time : datetime = None , content : str = None , raw_content : str = None , source : str = None , linked_assets : list = None , category : Union [ int , str ] = None , tags : list = None , color : str = None , display_in_graph : bool = None , display_in_summary : bool = None , custom_attributes : dict = None , cid : int = None , timezone_string : str = None ) -> ApiResponse : \"\"\" Updates an event of the timeline. event_id needs to be an existing event in the target case. If it is a string, category is lookup-ed up before the addition request is issued. it can be either a name or an ID. For performances prefer an ID as it is used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param event_id: Event ID to update :param title: Title of the event :param date_time: Datetime of the event, including timezone :param content: Content of the event (displayed in timeline on GUI) :param raw_content: Raw content of the event (displayed in detailed event on GUI) :param source: Source of the event :param linked_assets: List of assets to link with this event :param category: Category of the event (MITRE ATT@CK) :param color: Left border of the event in the timeline :param display_in_graph: Set to true to display in graph page - Default to true :param display_in_summary: Set to true to display in Summary - Default to false :param tags: A list of strings to add as tags :param custom_attributes: Custom attributes of the event :param timezone_string: Timezone in format +XX:XX or -XX:XX. If none, +00:00 is used :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) event_req = self . get_event ( event_id , cid = cid ) if event_req . is_error (): return ClientApiError ( msg = event_req . get_msg ()) event = event_req . get_data () if category and isinstance ( category , str ): cat = EventCategoryHelper ( session = self . _s ) evtx_cat_r = cat . lookup_event_category_name ( event_category = category ) if not evtx_cat_r : return ClientApiError ( msg = f \"Event category { category } is invalid\" ) category = evtx_cat_r if date_time and not isinstance ( date_time , datetime . datetime ): return ClientApiError ( msg = f \"Expected datetime object for date_time but got { type ( date_time ) } \" ) if tags and not isinstance ( tags , list ): return ClientApiError ( msg = f \"Expected list object for tags but got { type ( tags ) } \" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"event_title\" : title if title else event . get ( 'event_title' ), \"event_in_graph\" : display_in_graph if display_in_graph is not None else event . get ( 'event_in_graph' ), \"event_in_summary\" : display_in_summary if display_in_summary is not None else event . get ( 'event_in_summary' ), \"event_content\" : content if content else event . get ( 'event_content' ), \"event_raw\" : raw_content if raw_content else event . get ( 'event_raw' ), \"event_source\" : source if source else event . get ( 'event_source' ), \"event_assets\" : linked_assets if linked_assets else [], \"event_category_id\" : category if category else event . get ( 'event_category_id' ), \"event_color\" : color if color else event . get ( 'event_color' ), \"event_date\" : date_time . strftime ( '%Y-%m- %d T%H:%M:%S. %f ' ) if date_time else event . get ( 'event_date' ), \"event_tags\" : ',' . join ( tags ) if tags else event . get ( 'event_tags' ), \"event_tz\" : timezone_string if timezone_string else event . get ( 'event_tz' ), \"custom_attributes\" : custom_attributes if custom_attributes else event . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/timeline/events/update/ { event_id } ' , data = body )","title":"update_event()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_evidence","text":"Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 def update_evidence ( self , evidence_id : int , filename : str = None , file_size : int = None , description : str = None , file_hash : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an evidence of the matching case. evidence_id needs to be an existing evidence in the target case. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param evidence_id: ID of the evidence :param filename: name of the evidence :param file_size: Size of the file :param description: Description of the evidence :param file_hash: hash of the evidence :param custom_attributes: custom attributes of the evidences :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) evidence_req = self . get_evidence ( evidence_id = evidence_id , cid = cid ) if evidence_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch evidence # { evidence_id } for update' , error = evidence_req . get_msg ()) evidence = evidence_req . get_data () if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"filename\" : filename if filename else evidence . get ( 'filename' ), \"file_size\" : file_size if file_size else evidence . get ( 'file_size' ), \"file_description\" : description if description else evidence . get ( 'file_description' ), \"file_hash\" : file_hash if file_hash else evidence . get ( 'file_hash' ), \"custom_attributes\" : custom_attributes if custom_attributes else evidence . get ( \"custom_attributes\" ), \"cid\" : cid } return self . _s . pi_post ( f 'case/evidences/update/ { evidence_id } ' , data = body )","title":"update_evidence()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_global_task","text":"Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object Source code in dfir_iris_client/case.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def update_global_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be an existing task in the database. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param tags: Tags of the task :param status: String status, need to be a valid status :return: APIResponse object \"\"\" task_req = self . get_global_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), } return self . _s . pi_post ( f 'global/tasks/update/ { task_id } ' , data = body )","title":"update_global_task()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_ioc","text":"Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object Source code in dfir_iris_client/case.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 def update_ioc ( self , ioc_id : int , value : str = None , ioc_type : Union [ str , int ] = None , description : str = None , ioc_tlp : Union [ str , int ] = None , ioc_tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates an existing IOC. ioc_id needs to be an existing ioc in the provided case ID. If they are strings, ioc_tlp and ioc_type are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param ioc_id: IOC ID to update :param value: Value of the IOC :param ioc_type: Type of IOC, either name or type ID :param description: Description of the IOC :param ioc_tlp: TLP name or tlp ID. Default is orange :param ioc_tags: List of tags to add, :param custom_attributes: Custom attributes of the IOC :param cid: Case ID :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) ioc_req = self . get_ioc ( ioc_id , cid = cid ) if ioc_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch IOC # { ioc_id } for update' , error = ioc_req . get_msg ()) ioc = ioc_req . get_data () if ioc_tlp and isinstance ( ioc_tlp , str ): tlp = TlpHelper ( session = self . _s ) ioc_tlp_r = tlp . lookup_tlp_name ( tlp_name = ioc_tlp ) if not ioc_tlp_r : return ClientApiError ( msg = f \"TLP { ioc_tlp } is invalid\" ) ioc_tlp = ioc_tlp_r if ioc_type and isinstance ( ioc_type , str ): ioct = IocTypeHelper ( session = self . _s ) ioct_r = ioct . lookup_ioc_type_name ( ioc_type_name = ioc_type ) if not ioct_r : return ClientApiError ( msg = f \"IOC type { ioc_type } is invalid\" , error = ioct_r ) ioc_type = ioct_r if ioc_tags and not isinstance ( ioc_tags , list ): return ClientApiError ( f \"IOC tags must be a list of str\" ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) body = { \"ioc_value\" : value if value else ioc . get ( 'ioc_value' ), \"ioc_tlp_id\" : ioc_tlp if ioc_tlp else int ( ioc . get ( 'ioc_tlp_id' )), \"ioc_type_id\" : ioc_type if ioc_type else int ( ioc . get ( 'ioc_type_id' )), \"ioc_description\" : description if description else ioc . get ( 'ioc_description' ), \"ioc_tags\" : \",\" . join ( ioc_tags ) if ioc_tags else ioc . get ( 'ioc_tags' ), \"custom_attributes\" : custom_attributes if custom_attributes else ioc . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/ioc/update/ { ioc_id } ' , data = body )","title":"update_ioc()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_note","text":"Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object Source code in dfir_iris_client/case.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def update_note ( self , note_id : int , note_title : str = None , note_content : str = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a note. note_id needs to be a valid existing note in the target case. Only the content of the set fields is replaced. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param cid: Case ID :param note_id: Name of the note to update :param note_content: Content of the note :param note_title: Title of the note :param custom_attributes: Custom attributes of the note :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note_req = self . get_note ( note_id = note_id , cid = cid ) if note_req . is_error (): return ClientApiError ( f 'Unable to fetch note # { note_id } for update' , msg = note_req . get_msg ()) if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) note = note_req . get_data () body = { \"note_title\" : note_title if note_title else note . get ( 'note_title' ), \"note_content\" : note_content if note_content else note . get ( 'note_content' ), \"custom_attributes\" : custom_attributes , \"cid\" : cid } return self . _s . pi_post ( f 'case/notes/update/ { note_id } ' , data = body )","title":"update_note()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_notes_group","text":"Updates a notes group in the target cid case. group_id need to be an existing group in the target case. group_title can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object Source code in dfir_iris_client/case.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 def update_notes_group ( self , group_id : int , group_title : str , cid : int = None ) -> ApiResponse : \"\"\" Updates a notes group in the target cid case. `group_id` need to be an existing group in the target case. `group_title` can be an existing group, there is no uniqueness. :param cid: Case ID :param group_id: Group ID to update :param group_title: Name of the group :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) body = { \"group_title\" : group_title , \"group_id\" : group_id , \"cid\" : cid } return self . _s . pi_post ( 'case/notes/groups/update' , data = body )","title":"update_notes_group()"},{"location":"python_client/references/case/#dfir_iris_client.case.Case.update_task","text":"Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object Source code in dfir_iris_client/case.py 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 def update_task ( self , task_id : int , title : str = None , status : Union [ str , int ] = None , assignee : Union [ int , str ] = None , description : str = None , tags : list = None , custom_attributes : dict = None , cid : int = None ) -> ApiResponse : \"\"\" Updates a task. task_id needs to be a valid task in the target case. If they are strings, status and assignee are lookup-ed up before the addition request is issued. Both can be either a name or an ID. For performances prefer an ID as they're used directly in the request without prior lookup. Custom_attributes is an undefined structure when the call is made. This method does not allow to push a new attribute structure. The submitted structure must follow the one defined by administrators in the UI otherwise it is ignored. :param task_id: ID of the task to update :param title: Title of the task :param description: Description of the task :param assignee: Assignee ID or assignee username :param cid: Case ID :param tags: Tags of the task :param status: String status, need to be a valid status :param custom_attributes: Custom attributes of the task :return: APIResponse object \"\"\" cid = self . _assert_cid ( cid ) task_req = self . get_task ( task_id = task_id ) if task_req . is_error (): return ClientApiError ( msg = f 'Unable to fetch task # { task_id } for update' , error = task_req . get_msg ()) if assignee and isinstance ( assignee , str ): user = User ( self . _s ) assignee_r = user . lookup_username ( username = assignee ) if assignee_r . is_error (): return assignee_r assignee = assignee_r . get_data () . get ( 'user_id' ) if not assignee : return ClientApiError ( msg = f 'Error while looking up username { assignee } ' ) elif assignee and not isinstance ( assignee , int ): return ClientApiError ( msg = f 'Invalid assignee type { type ( assignee ) } ' ) if status and isinstance ( status , str ): tsh = TaskStatusHelper ( self . _s ) tsh_r = tsh . lookup_task_status_name ( task_status_name = status ) if tsh_r is None : return ClientApiError ( msg = f 'Invalid task status { status } ' ) status = tsh_r if custom_attributes is not None and not isinstance ( custom_attributes , dict ): return ClientApiError ( f 'Got type { type ( custom_attributes ) } for custom_attributes but dict was expected.' ) task = task_req . get_data () body = { \"task_assignee_id\" : assignee if assignee else task . get ( 'task_assignee_id' ), \"task_description\" : description if description else task . get ( 'task_description' ), \"task_status_id\" : status if status else task . get ( 'task_status_id' ), \"task_tags\" : \",\" . join ( tags ) if tags else task . get ( 'task_tags' ), \"task_title\" : title if title else task . get ( 'task_title' ), \"custom_attributes\" : custom_attributes if custom_attributes else task . get ( 'custom_attributes' ), \"cid\" : cid } return self . _s . pi_post ( f 'case/tasks/update/ { task_id } ' , data = body )","title":"update_task()"},{"location":"python_client/references/customer/","text":"Customer Bases: object Handles the customer methods Source code in dfir_iris_client/customer.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Customer ( object ): \"\"\" Handles the customer methods \"\"\" def __init__ ( self , session ): self . _s = session def lookup_customer ( self , customer_name ) -> ApiResponse : \"\"\" Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( '/manage/customers/list' ) if resp . is_success (): customer_list = resp . get_data () for customer in customer_list : if customer . get ( 'customer_name' ) . lower () == customer_name . lower (): response = ClientApiData ( data = customer ) return ApiResponse ( response = response , uri = resp . get_uri ()) return ClientApiError ( f \"Customer { customer_name } not found\" ) def get_customer_by_id ( self , customer_id : int ) -> ApiResponse : \"\"\" Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( f '/manage/customers/ { customer_id } ' ) return resp def list_customers ( self ) -> ApiResponse : \"\"\" Returns a list of the available customers :return: ApiResponse object \"\"\" return self . _s . pi_get ( f '/manage/customers/list' ) get_customer_by_id ( customer_id ) Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object Source code in dfir_iris_client/customer.py 49 50 51 52 53 54 55 56 57 58 def get_customer_by_id ( self , customer_id : int ) -> ApiResponse : \"\"\" Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( f '/manage/customers/ { customer_id } ' ) return resp list_customers () Returns a list of the available customers :return: ApiResponse object Source code in dfir_iris_client/customer.py 60 61 62 63 64 65 66 67 def list_customers ( self ) -> ApiResponse : \"\"\" Returns a list of the available customers :return: ApiResponse object \"\"\" return self . _s . pi_get ( f '/manage/customers/list' ) lookup_customer ( customer_name ) Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object Source code in dfir_iris_client/customer.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def lookup_customer ( self , customer_name ) -> ApiResponse : \"\"\" Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( '/manage/customers/list' ) if resp . is_success (): customer_list = resp . get_data () for customer in customer_list : if customer . get ( 'customer_name' ) . lower () == customer_name . lower (): response = ClientApiData ( data = customer ) return ApiResponse ( response = response , uri = resp . get_uri ()) return ClientApiError ( f \"Customer { customer_name } not found\" )","title":"Customer"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer","text":"Bases: object Handles the customer methods Source code in dfir_iris_client/customer.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Customer ( object ): \"\"\" Handles the customer methods \"\"\" def __init__ ( self , session ): self . _s = session def lookup_customer ( self , customer_name ) -> ApiResponse : \"\"\" Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( '/manage/customers/list' ) if resp . is_success (): customer_list = resp . get_data () for customer in customer_list : if customer . get ( 'customer_name' ) . lower () == customer_name . lower (): response = ClientApiData ( data = customer ) return ApiResponse ( response = response , uri = resp . get_uri ()) return ClientApiError ( f \"Customer { customer_name } not found\" ) def get_customer_by_id ( self , customer_id : int ) -> ApiResponse : \"\"\" Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( f '/manage/customers/ { customer_id } ' ) return resp def list_customers ( self ) -> ApiResponse : \"\"\" Returns a list of the available customers :return: ApiResponse object \"\"\" return self . _s . pi_get ( f '/manage/customers/list' )","title":"Customer"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.get_customer_by_id","text":"Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object Source code in dfir_iris_client/customer.py 49 50 51 52 53 54 55 56 57 58 def get_customer_by_id ( self , customer_id : int ) -> ApiResponse : \"\"\" Returns a customer from its ID :param customer_id: Customer ID to look up :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( f '/manage/customers/ { customer_id } ' ) return resp","title":"get_customer_by_id()"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.list_customers","text":"Returns a list of the available customers :return: ApiResponse object Source code in dfir_iris_client/customer.py 60 61 62 63 64 65 66 67 def list_customers ( self ) -> ApiResponse : \"\"\" Returns a list of the available customers :return: ApiResponse object \"\"\" return self . _s . pi_get ( f '/manage/customers/list' )","title":"list_customers()"},{"location":"python_client/references/customer/#dfir_iris_client.customer.Customer.lookup_customer","text":"Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object Source code in dfir_iris_client/customer.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def lookup_customer ( self , customer_name ) -> ApiResponse : \"\"\" Returns a customer ID if customer name is found. Customer names are unique in the database. Customer ID is in the data section of the API response aka id = parse_api_data(resp.get_data(), 'customer_id') :param: Customer name :return: ApiResponse object \"\"\" resp = self . _s . pi_get ( '/manage/customers/list' ) if resp . is_success (): customer_list = resp . get_data () for customer in customer_list : if customer . get ( 'customer_name' ) . lower () == customer_name . lower (): response = ClientApiData ( data = customer ) return ApiResponse ( response = response , uri = resp . get_uri ()) return ClientApiError ( f \"Customer { customer_name } not found\" )","title":"lookup_customer()"},{"location":"python_client/references/global_search/","text":"global_search_ioc ( session , search_term ) Searches an IOC across all investigation :param session: Client Session to use for request :param search_term: Search term to search for IOC :return: ApiResponse object Source code in dfir_iris_client/global_search.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def global_search_ioc ( session : ClientSession , search_term : str ) -> ApiResponse : \"\"\" Searches an IOC across all investigation :param session: Client Session to use for request :param search_term: Search term to search for IOC :return: ApiResponse object \"\"\" if not session : return ClientApiError ( msg = f 'session is not a valid. Expected ClientSession got { type ( session ) } ' ) if not search_term : return ClientApiError ( msg = 'search_term cannot be null. Use % f or wildcard' ) body = { \"search_value\" : search_term , \"search_type\" : \"ioc\" , \"cid\" : 1 } return session . pi_post ( 'search' , data = body ) global_search_notes ( session , search_term ) Searches in note contents across all investigation :param session: Client Session to use for request :param search_term: Search term to search for notes :return: ApiResponse object Source code in dfir_iris_client/global_search.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def global_search_notes ( session : ClientSession , search_term : str ) -> ApiResponse : \"\"\" Searches in note contents across all investigation :param session: Client Session to use for request :param search_term: Search term to search for notes :return: ApiResponse object \"\"\" if not session : return ClientApiError ( msg = f 'session is not a valid. Expected ClientSession got { type ( session ) } ' ) if not search_term : return ClientApiError ( msg = 'search_term cannot be null. Use % f or wildcard' ) body = { \"search_value\" : search_term , \"search_type\" : \"notes\" , \"cid\" : 1 } return session . pi_post ( 'search' , data = body )","title":"Global search"},{"location":"python_client/references/global_search/#dfir_iris_client.global_search.global_search_ioc","text":"Searches an IOC across all investigation :param session: Client Session to use for request :param search_term: Search term to search for IOC :return: ApiResponse object Source code in dfir_iris_client/global_search.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def global_search_ioc ( session : ClientSession , search_term : str ) -> ApiResponse : \"\"\" Searches an IOC across all investigation :param session: Client Session to use for request :param search_term: Search term to search for IOC :return: ApiResponse object \"\"\" if not session : return ClientApiError ( msg = f 'session is not a valid. Expected ClientSession got { type ( session ) } ' ) if not search_term : return ClientApiError ( msg = 'search_term cannot be null. Use % f or wildcard' ) body = { \"search_value\" : search_term , \"search_type\" : \"ioc\" , \"cid\" : 1 } return session . pi_post ( 'search' , data = body )","title":"global_search_ioc()"},{"location":"python_client/references/global_search/#dfir_iris_client.global_search.global_search_notes","text":"Searches in note contents across all investigation :param session: Client Session to use for request :param search_term: Search term to search for notes :return: ApiResponse object Source code in dfir_iris_client/global_search.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def global_search_notes ( session : ClientSession , search_term : str ) -> ApiResponse : \"\"\" Searches in note contents across all investigation :param session: Client Session to use for request :param search_term: Search term to search for notes :return: ApiResponse object \"\"\" if not session : return ClientApiError ( msg = f 'session is not a valid. Expected ClientSession got { type ( session ) } ' ) if not search_term : return ClientApiError ( msg = 'search_term cannot be null. Use % f or wildcard' ) body = { \"search_value\" : search_term , \"search_type\" : \"notes\" , \"cid\" : 1 } return session . pi_post ( 'search' , data = body )","title":"global_search_notes()"},{"location":"python_client/references/session/","text":"API_VERSION = '1.0.2' module-attribute client_session Defines a global session, accessible by all classes. client_session is of type ClientSession. log = logger . getLogger ( __name__ ) module-attribute API_VERSION The API version is not directly correlated with Iris version. Server has an endpoint /api/versions which should returns the API compatible versions it can handles. ClientSession Bases: object Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server. Source code in dfir_iris_client/session.pyclass ClientSession ( object ): \"\"\" Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server. \"\"\" def __init__ ( self , apikey , host = None , agent = \"iris-client\" , ssl_verify = True , proxy = None , timeout = 120 ): \"\"\" Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. Version verification expects to fall into the following schema : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests \"\"\" self . _apikey = apikey self . _host = host self . _agent = agent self . _ssl_verify = ssl_verify self . _proxy = proxy self . _timeout = timeout if not self . _ssl_verify : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . _check_apikey_validity () self . _check_api_compatibility () global client_session client_session = self def preload_base_objects ( self ) -> None : \"\"\" Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None \"\"\" pass def _check_api_compatibility ( self ) -> bool : \"\"\" Checks that the server and client can work together. The methods expects the following : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool \"\"\" resp = self . pi_get ( 'api/versions' , cid = 1 ) if resp . is_error (): raise Exception ( f 'Unable to contact endpoint api/versions. { resp . get_msg () } ' ) versions = resp . get_data () min_ver = versions . get ( 'api_min' ) max_ver = versions . get ( 'api_current' ) if Version ( min_ver ) <= Version ( API_VERSION ) <= Version ( max_ver ): return True raise Exception ( f 'Incompatible API version. Server expects { min_ver } -> { max_ver } but client is { API_VERSION } ' ) def _check_apikey_validity ( self ) -> bool : \"\"\" Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool \"\"\" if not isinstance ( self . _apikey , str ): raise ValueError ( 'API key must be a string' ) if not self . _apikey : raise ValueError ( 'API key can not be an empty string' ) resp = self . pi_get ( 'api/ping' , cid = 1 ) if resp . is_error (): raise ValueError ( f 'Invalid API key. { resp . get_msg () } ' ) return True def _pi_uri ( self , uri : str = None ): \"\"\" Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request \"\"\" return self . _host + '/' + uri def pi_get ( self , uri : str , cid : int = None ) -> ApiResponse : \"\"\" Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object \"\"\" if cid : uri = f \" { uri } ?cid= { cid } \" return self . _pi_request ( uri , type = 'GET' ) def pi_post ( self , uri : str , data : dict ) -> ApiResponse : \"\"\" Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object \"\"\" return self . _pi_request ( uri , type = 'POST' , data = data ) def _pi_request ( self , uri : str , type : str = None , data : dict = None ) -> ApiResponse : \"\"\" Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object \"\"\" try : headers = { 'Content-Type' : \"application/json\" , 'Authorization' : \"Bearer \" + self . _apikey } if type == \"POST\" : log . debug ( f 'POST : { self . _pi_uri ( uri ) } ' ) response = requests . post ( url = self . _pi_uri ( uri ), json = data , verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) elif type == \"GET\" : log . debug ( f 'GET : { self . _pi_uri ( uri ) } ' ) response = requests . get ( url = self . _pi_uri ( uri ), verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) else : return ApiResponse () except requests . exceptions . ConnectionError as e : raise Exception ( \"Unable to connect to endpoint {host} . Please check URL and ports\" . format ( host = uri )) if response . status_code == 500 : log . critical ( 'Server replied 500' ) raise Exception ( \"Server side error. Please check server logs for more information\" ) log . debug ( f 'Server replied with status { response . status_code } ' ) return ApiResponse ( response . content , uri = uri ) __init__ ( apikey , host = None , agent = 'iris-client' , ssl_verify = True , proxy = None , timeout = 120 ) Version verification expects to fall into the following schema Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests Source code in dfir_iris_client/session.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , apikey , host = None , agent = \"iris-client\" , ssl_verify = True , proxy = None , timeout = 120 ): \"\"\" Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. Version verification expects to fall into the following schema : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests \"\"\" self . _apikey = apikey self . _host = host self . _agent = agent self . _ssl_verify = ssl_verify self . _proxy = proxy self . _timeout = timeout if not self . _ssl_verify : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . _check_apikey_validity () self . _check_api_compatibility () global client_session client_session = self _check_api_compatibility () Checks that the server and client can work together. The methods expects the following : Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool Source code in dfir_iris_client/session.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def _check_api_compatibility ( self ) -> bool : \"\"\" Checks that the server and client can work together. The methods expects the following : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool \"\"\" resp = self . pi_get ( 'api/versions' , cid = 1 ) if resp . is_error (): raise Exception ( f 'Unable to contact endpoint api/versions. { resp . get_msg () } ' ) versions = resp . get_data () min_ver = versions . get ( 'api_min' ) max_ver = versions . get ( 'api_current' ) if Version ( min_ver ) <= Version ( API_VERSION ) <= Version ( max_ver ): return True raise Exception ( f 'Incompatible API version. Server expects { min_ver } -> { max_ver } but client is { API_VERSION } ' ) _check_apikey_validity () Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool Source code in dfir_iris_client/session.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def _check_apikey_validity ( self ) -> bool : \"\"\" Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool \"\"\" if not isinstance ( self . _apikey , str ): raise ValueError ( 'API key must be a string' ) if not self . _apikey : raise ValueError ( 'API key can not be an empty string' ) resp = self . pi_get ( 'api/ping' , cid = 1 ) if resp . is_error (): raise ValueError ( f 'Invalid API key. { resp . get_msg () } ' ) return True _pi_request ( uri , type = None , data = None ) Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object Source code in dfir_iris_client/session.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 def _pi_request ( self , uri : str , type : str = None , data : dict = None ) -> ApiResponse : \"\"\" Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object \"\"\" try : headers = { 'Content-Type' : \"application/json\" , 'Authorization' : \"Bearer \" + self . _apikey } if type == \"POST\" : log . debug ( f 'POST : { self . _pi_uri ( uri ) } ' ) response = requests . post ( url = self . _pi_uri ( uri ), json = data , verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) elif type == \"GET\" : log . debug ( f 'GET : { self . _pi_uri ( uri ) } ' ) response = requests . get ( url = self . _pi_uri ( uri ), verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) else : return ApiResponse () except requests . exceptions . ConnectionError as e : raise Exception ( \"Unable to connect to endpoint {host} . Please check URL and ports\" . format ( host = uri )) if response . status_code == 500 : log . critical ( 'Server replied 500' ) raise Exception ( \"Server side error. Please check server logs for more information\" ) log . debug ( f 'Server replied with status { response . status_code } ' ) return ApiResponse ( response . content , uri = uri ) _pi_uri ( uri = None ) Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request Source code in dfir_iris_client/session.py 137 138 139 140 141 142 143 144 def _pi_uri ( self , uri : str = None ): \"\"\" Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request \"\"\" return self . _host + '/' + uri pi_get ( uri , cid = None ) Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object Source code in dfir_iris_client/session.py 146 147 148 149 150 151 152 153 154 155 156 157 158 def pi_get ( self , uri : str , cid : int = None ) -> ApiResponse : \"\"\" Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object \"\"\" if cid : uri = f \" { uri } ?cid= { cid } \" return self . _pi_request ( uri , type = 'GET' ) pi_post ( uri , data ) Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object Source code in dfir_iris_client/session.py 160 161 162 163 164 165 166 167 168 def pi_post ( self , uri : str , data : dict ) -> ApiResponse : \"\"\" Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object \"\"\" return self . _pi_request ( uri , type = 'POST' , data = data ) preload_base_objects () Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None Source code in dfir_iris_client/session.py 81 82 83 84 85 86 87 88 89 90 91 def preload_base_objects ( self ) -> None : \"\"\" Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None \"\"\" pass","title":"Session"},{"location":"python_client/references/session/#dfir_iris_client.session.API_VERSION","text":"client_session Defines a global session, accessible by all classes. client_session is of type ClientSession.","title":"API_VERSION"},{"location":"python_client/references/session/#dfir_iris_client.session.log","text":"API_VERSION The API version is not directly correlated with Iris version. Server has an endpoint /api/versions which should returns the API compatible versions it can handles.","title":"log"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession","text":"Bases: object Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server. Source code in dfir_iris_client/session.pyclass ClientSession ( object ): \"\"\" Represents a client that can interacts with Iris. It is basic wrapper handling authentication and the requests to the server. \"\"\" def __init__ ( self , apikey , host = None , agent = \"iris-client\" , ssl_verify = True , proxy = None , timeout = 120 ): \"\"\" Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. Version verification expects to fall into the following schema : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests \"\"\" self . _apikey = apikey self . _host = host self . _agent = agent self . _ssl_verify = ssl_verify self . _proxy = proxy self . _timeout = timeout if not self . _ssl_verify : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . _check_apikey_validity () self . _check_api_compatibility () global client_session client_session = self def preload_base_objects ( self ) -> None : \"\"\" Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None \"\"\" pass def _check_api_compatibility ( self ) -> bool : \"\"\" Checks that the server and client can work together. The methods expects the following : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool \"\"\" resp = self . pi_get ( 'api/versions' , cid = 1 ) if resp . is_error (): raise Exception ( f 'Unable to contact endpoint api/versions. { resp . get_msg () } ' ) versions = resp . get_data () min_ver = versions . get ( 'api_min' ) max_ver = versions . get ( 'api_current' ) if Version ( min_ver ) <= Version ( API_VERSION ) <= Version ( max_ver ): return True raise Exception ( f 'Incompatible API version. Server expects { min_ver } -> { max_ver } but client is { API_VERSION } ' ) def _check_apikey_validity ( self ) -> bool : \"\"\" Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool \"\"\" if not isinstance ( self . _apikey , str ): raise ValueError ( 'API key must be a string' ) if not self . _apikey : raise ValueError ( 'API key can not be an empty string' ) resp = self . pi_get ( 'api/ping' , cid = 1 ) if resp . is_error (): raise ValueError ( f 'Invalid API key. { resp . get_msg () } ' ) return True def _pi_uri ( self , uri : str = None ): \"\"\" Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request \"\"\" return self . _host + '/' + uri def pi_get ( self , uri : str , cid : int = None ) -> ApiResponse : \"\"\" Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object \"\"\" if cid : uri = f \" { uri } ?cid= { cid } \" return self . _pi_request ( uri , type = 'GET' ) def pi_post ( self , uri : str , data : dict ) -> ApiResponse : \"\"\" Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object \"\"\" return self . _pi_request ( uri , type = 'POST' , data = data ) def _pi_request ( self , uri : str , type : str = None , data : dict = None ) -> ApiResponse : \"\"\" Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object \"\"\" try : headers = { 'Content-Type' : \"application/json\" , 'Authorization' : \"Bearer \" + self . _apikey } if type == \"POST\" : log . debug ( f 'POST : { self . _pi_uri ( uri ) } ' ) response = requests . post ( url = self . _pi_uri ( uri ), json = data , verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) elif type == \"GET\" : log . debug ( f 'GET : { self . _pi_uri ( uri ) } ' ) response = requests . get ( url = self . _pi_uri ( uri ), verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) else : return ApiResponse () except requests . exceptions . ConnectionError as e : raise Exception ( \"Unable to connect to endpoint {host} . Please check URL and ports\" . format ( host = uri )) if response . status_code == 500 : log . critical ( 'Server replied 500' ) raise Exception ( \"Server side error. Please check server logs for more information\" ) log . debug ( f 'Server replied with status { response . status_code } ' ) return ApiResponse ( response . content , uri = uri )","title":"ClientSession"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.__init__","text":"Version verification expects to fall into the following schema Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests Source code in dfir_iris_client/session.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , apikey , host = None , agent = \"iris-client\" , ssl_verify = True , proxy = None , timeout = 120 ): \"\"\" Initialize the ClientSession. APIKey validity is verified as well as API compatibility between the client and the server. Version verification expects to fall into the following schema : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If the client does not find itself compatible, an exception is raised. Once successfully initialized, the session become available through global var client_session. :param apikey: A valid API key. It can be fetched from My profile > API Key :param host: Target IRIS server full URL eg https://iris.local:9443 :param agent: User agent to issue the requests with :param ssl_verify: Set or unset SSL verification :param proxy: Proxy parameters - For future use only :param timeout: Default timeout for requests \"\"\" self . _apikey = apikey self . _host = host self . _agent = agent self . _ssl_verify = ssl_verify self . _proxy = proxy self . _timeout = timeout if not self . _ssl_verify : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . _check_apikey_validity () self . _check_api_compatibility () global client_session client_session = self","title":"__init__()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._check_api_compatibility","text":"Checks that the server and client can work together. The methods expects the following : Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version) If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool Source code in dfir_iris_client/session.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def _check_api_compatibility ( self ) -> bool : \"\"\" Checks that the server and client can work together. The methods expects the following : `Version(server_min_api_version) <= Version(client_api_version) <= Version(server_max_api_version)` If API is not compatible, an exception is raised. :raises: Exception if not API compatible :return: bool \"\"\" resp = self . pi_get ( 'api/versions' , cid = 1 ) if resp . is_error (): raise Exception ( f 'Unable to contact endpoint api/versions. { resp . get_msg () } ' ) versions = resp . get_data () min_ver = versions . get ( 'api_min' ) max_ver = versions . get ( 'api_current' ) if Version ( min_ver ) <= Version ( API_VERSION ) <= Version ( max_ver ): return True raise Exception ( f 'Incompatible API version. Server expects { min_ver } -> { max_ver } but client is { API_VERSION } ' )","title":"_check_api_compatibility()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._check_apikey_validity","text":"Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool Source code in dfir_iris_client/session.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def _check_apikey_validity ( self ) -> bool : \"\"\" Checks the validity of the provided API key (emptiness, string and authorized). If the key is invalid, a ValueError exception is raised. :raises: ValueError if the API key is invalid :return: bool \"\"\" if not isinstance ( self . _apikey , str ): raise ValueError ( 'API key must be a string' ) if not self . _apikey : raise ValueError ( 'API key can not be an empty string' ) resp = self . pi_get ( 'api/ping' , cid = 1 ) if resp . is_error (): raise ValueError ( f 'Invalid API key. { resp . get_msg () } ' ) return True","title":"_check_apikey_validity()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._pi_request","text":"Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object Source code in dfir_iris_client/session.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 def _pi_request ( self , uri : str , type : str = None , data : dict = None ) -> ApiResponse : \"\"\" Make a request (GET or POST) and handle the errors. The authentication header is added. :raises: Exception if server can't be reached or if server replied 500 :param uri: URI to request :param type: Type of the request [POST or GET] :param data: dict to send if request type is POST :return: ApiResponse object \"\"\" try : headers = { 'Content-Type' : \"application/json\" , 'Authorization' : \"Bearer \" + self . _apikey } if type == \"POST\" : log . debug ( f 'POST : { self . _pi_uri ( uri ) } ' ) response = requests . post ( url = self . _pi_uri ( uri ), json = data , verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) elif type == \"GET\" : log . debug ( f 'GET : { self . _pi_uri ( uri ) } ' ) response = requests . get ( url = self . _pi_uri ( uri ), verify = self . _ssl_verify , timeout = self . _timeout , headers = headers ) else : return ApiResponse () except requests . exceptions . ConnectionError as e : raise Exception ( \"Unable to connect to endpoint {host} . Please check URL and ports\" . format ( host = uri )) if response . status_code == 500 : log . critical ( 'Server replied 500' ) raise Exception ( \"Server side error. Please check server logs for more information\" ) log . debug ( f 'Server replied with status { response . status_code } ' ) return ApiResponse ( response . content , uri = uri )","title":"_pi_request()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession._pi_uri","text":"Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request Source code in dfir_iris_client/session.py 137 138 139 140 141 142 143 144 def _pi_uri ( self , uri : str = None ): \"\"\" Wraps the provided uri around the URL. :param uri: URI to request :return: Str - URL to request \"\"\" return self . _host + '/' + uri","title":"_pi_uri()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.pi_get","text":"Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object Source code in dfir_iris_client/session.py 146 147 148 149 150 151 152 153 154 155 156 157 158 def pi_get ( self , uri : str , cid : int = None ) -> ApiResponse : \"\"\" Adds the CID information needed by the server when issuing GET requests and then issue the request itself. :param uri: URI endpoint to request :param cid: Target case ID :return: ApiResponse object \"\"\" if cid : uri = f \" { uri } ?cid= { cid } \" return self . _pi_request ( uri , type = 'GET' )","title":"pi_get()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.pi_post","text":"Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object Source code in dfir_iris_client/session.py 160 161 162 163 164 165 166 167 168 def pi_post ( self , uri : str , data : dict ) -> ApiResponse : \"\"\" Issues a POSt request with the provided data. Simple wrapper around _pi_request :param uri: URI endpoint to request :param data: data to be posted. Expect a dict :return: ApiResponse object \"\"\" return self . _pi_request ( uri , type = 'POST' , data = data )","title":"pi_post()"},{"location":"python_client/references/session/#dfir_iris_client.session.ClientSession.preload_base_objects","text":"Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None Source code in dfir_iris_client/session.py 81 82 83 84 85 86 87 88 89 90 91 def preload_base_objects ( self ) -> None : \"\"\" Preload the base objects most commonly used. This simply init the BaseObjects class, which in turns requests and build all the most common objects such as AnalysisStatus, EventCategory, EventType, etc. For future use only :return: None \"\"\" pass","title":"preload_base_objects()"},{"location":"python_client/references/users/","text":"User Bases: object Handles the users type methods Source code in dfir_iris_client/users.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class User ( object ): \"\"\" Handles the users type methods \"\"\" def __init__ ( self , session ): self . _s = session def user_id_exists ( self , user_id : int ) -> bool : \"\"\" Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" req = self . get_user ( user_id = user_id ) return req . is_success () def username_exists ( self , username : str ) -> bool : \"\"\" Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false \"\"\" req = self . lookup_username ( username = username ) return req . is_success () def lookup_username ( self , username : str ) -> ApiResponse : \"\"\" Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/login/ { username } ' ) def get_user ( self , user_id : int ) -> ApiResponse : \"\"\" Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/id/ { user_id } ' ) def list_users ( self ): \"\"\" Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/restricted/list' ) get_user ( user_id ) Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name Source code in dfir_iris_client/users.py 60 61 62 63 64 65 66 67 68 def get_user ( self , user_id : int ) -> ApiResponse : \"\"\" Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/id/ { user_id } ' ) list_users () Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse Source code in dfir_iris_client/users.py 70 71 72 73 74 75 76 def list_users ( self ): \"\"\" Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/restricted/list' ) lookup_username ( username ) Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse Source code in dfir_iris_client/users.py 50 51 52 53 54 55 56 57 58 def lookup_username ( self , username : str ) -> ApiResponse : \"\"\" Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/login/ { username } ' ) user_id_exists ( user_id ) Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name Source code in dfir_iris_client/users.py 27 28 29 30 31 32 33 34 35 36 def user_id_exists ( self , user_id : int ) -> bool : \"\"\" Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" req = self . get_user ( user_id = user_id ) return req . is_success () username_exists ( username ) Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false Source code in dfir_iris_client/users.py 38 39 40 41 42 43 44 45 46 47 48 def username_exists ( self , username : str ) -> bool : \"\"\" Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false \"\"\" req = self . lookup_username ( username = username ) return req . is_success ()","title":"Users"},{"location":"python_client/references/users/#dfir_iris_client.users.User","text":"Bases: object Handles the users type methods Source code in dfir_iris_client/users.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class User ( object ): \"\"\" Handles the users type methods \"\"\" def __init__ ( self , session ): self . _s = session def user_id_exists ( self , user_id : int ) -> bool : \"\"\" Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" req = self . get_user ( user_id = user_id ) return req . is_success () def username_exists ( self , username : str ) -> bool : \"\"\" Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false \"\"\" req = self . lookup_username ( username = username ) return req . is_success () def lookup_username ( self , username : str ) -> ApiResponse : \"\"\" Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/login/ { username } ' ) def get_user ( self , user_id : int ) -> ApiResponse : \"\"\" Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/id/ { user_id } ' ) def list_users ( self ): \"\"\" Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/restricted/list' )","title":"User"},{"location":"python_client/references/users/#dfir_iris_client.users.User.get_user","text":"Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name Source code in dfir_iris_client/users.py 60 61 62 63 64 65 66 67 68 def get_user ( self , user_id : int ) -> ApiResponse : \"\"\" Return a user data :param user_id: USer ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/id/ { user_id } ' )","title":"get_user()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.list_users","text":"Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse Source code in dfir_iris_client/users.py 70 71 72 73 74 75 76 def list_users ( self ): \"\"\" Returns a list of the users with a restricted view so it can be called by unprivileged users. :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/restricted/list' )","title":"list_users()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.lookup_username","text":"Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse Source code in dfir_iris_client/users.py 50 51 52 53 54 55 56 57 58 def lookup_username ( self , username : str ) -> ApiResponse : \"\"\" Returns a user ID corresponding to the username, else None :param username: User name to lookup :return: ApiResponse \"\"\" return self . _s . pi_get ( f 'manage/users/lookup/login/ { username } ' )","title":"lookup_username()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.user_id_exists","text":"Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name Source code in dfir_iris_client/users.py 27 28 29 30 31 32 33 34 35 36 def user_id_exists ( self , user_id : int ) -> bool : \"\"\" Returns True if the user ID exists, else false :param user_id: User ID to verify :return: bool - Asset type ID matching provided asset type name \"\"\" req = self . get_user ( user_id = user_id ) return req . is_success ()","title":"user_id_exists()"},{"location":"python_client/references/users/#dfir_iris_client.users.User.username_exists","text":"Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false Source code in dfir_iris_client/users.py 38 39 40 41 42 43 44 45 46 47 48 def username_exists ( self , username : str ) -> bool : \"\"\" Returns True if the username (login) exists, else false. This is equivalent to calling lookup_username() and getting the results. :param username: User name (login) to lookup :return: True if exists else false \"\"\" req = self . lookup_username ( username = username ) return req . is_success ()","title":"username_exists()"}]}